ARM GAS  /tmp/ccyCW88r.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ethernetif.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.low_level_input,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-sp-d16
  25              	low_level_input:
  26              	.LVL0:
  27              	.LFB164:
  28              		.file 1 "Src/ethernetif.c"
   1:Src/ethernetif.c **** /**
   2:Src/ethernetif.c ****   ******************************************************************************
   3:Src/ethernetif.c ****   * File Name          : ethernetif.c
   4:Src/ethernetif.c ****   * Description        : This file provides code for the configuration
   5:Src/ethernetif.c ****   *                      of the ethernetif.c MiddleWare.
   6:Src/ethernetif.c ****   ******************************************************************************
   7:Src/ethernetif.c ****   * This notice applies to any and all portions of this file
   8:Src/ethernetif.c ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/ethernetif.c ****   * USER CODE END. Other portions of this file, whether 
  10:Src/ethernetif.c ****   * inserted by the user or by software development tools
  11:Src/ethernetif.c ****   * are owned by their respective copyright owners.
  12:Src/ethernetif.c ****   *
  13:Src/ethernetif.c ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/ethernetif.c ****   * All rights reserved.
  15:Src/ethernetif.c ****   *
  16:Src/ethernetif.c ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/ethernetif.c ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/ethernetif.c ****   *
  19:Src/ethernetif.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/ethernetif.c ****   *    this list of conditions and the following disclaimer.
  21:Src/ethernetif.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/ethernetif.c ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/ethernetif.c ****   *    and/or other materials provided with the distribution.
  24:Src/ethernetif.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/ethernetif.c ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/ethernetif.c ****   *    derived from this software without specific written permission.
  27:Src/ethernetif.c ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/ethernetif.c ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/ethernetif.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/ethernetif.c ****   * 5. Redistribution and use of this software other than as permitted under 
ARM GAS  /tmp/ccyCW88r.s 			page 2


  31:Src/ethernetif.c ****   *    this license is void and will automatically terminate your rights under 
  32:Src/ethernetif.c ****   *    this license. 
  33:Src/ethernetif.c ****   *
  34:Src/ethernetif.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/ethernetif.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/ethernetif.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/ethernetif.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/ethernetif.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/ethernetif.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/ethernetif.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/ethernetif.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/ethernetif.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/ethernetif.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/ethernetif.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/ethernetif.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/ethernetif.c ****   *
  47:Src/ethernetif.c ****   ******************************************************************************
  48:Src/ethernetif.c ****   */
  49:Src/ethernetif.c **** 
  50:Src/ethernetif.c **** /* Includes ------------------------------------------------------------------*/
  51:Src/ethernetif.c **** #include "stm32f7xx_hal.h"
  52:Src/ethernetif.c **** #include "lwip/opt.h"
  53:Src/ethernetif.c **** #include "lwip/mem.h"
  54:Src/ethernetif.c **** #include "lwip/memp.h"
  55:Src/ethernetif.c **** #include "lwip/timeouts.h"
  56:Src/ethernetif.c **** #include "netif/ethernet.h"
  57:Src/ethernetif.c **** #include "netif/etharp.h"
  58:Src/ethernetif.c **** #include "lwip/ethip6.h"
  59:Src/ethernetif.c **** #include "ethernetif.h"
  60:Src/ethernetif.c **** #include <string.h>
  61:Src/ethernetif.c **** 
  62:Src/ethernetif.c **** /* Within 'USER CODE' section, code will be kept by default at each generation */
  63:Src/ethernetif.c **** /* USER CODE BEGIN 0 */
  64:Src/ethernetif.c **** 
  65:Src/ethernetif.c **** /* USER CODE END 0 */
  66:Src/ethernetif.c **** 
  67:Src/ethernetif.c **** /* Private define ------------------------------------------------------------*/
  68:Src/ethernetif.c **** 
  69:Src/ethernetif.c **** /* Network interface name */
  70:Src/ethernetif.c **** #define IFNAME0 's'
  71:Src/ethernetif.c **** #define IFNAME1 't'
  72:Src/ethernetif.c **** 
  73:Src/ethernetif.c **** /* USER CODE BEGIN 1 */
  74:Src/ethernetif.c **** 
  75:Src/ethernetif.c **** /* USER CODE END 1 */
  76:Src/ethernetif.c **** 
  77:Src/ethernetif.c **** /* Private variables ---------------------------------------------------------*/
  78:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  79:Src/ethernetif.c ****   #pragma data_alignment=4   
  80:Src/ethernetif.c **** #endif
  81:Src/ethernetif.c **** __ALIGN_BEGIN ETH_DMADescTypeDef  DMARxDscrTab[ETH_RXBUFNB] __ALIGN_END;/* Ethernet Rx MA Descripto
  82:Src/ethernetif.c **** 
  83:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  84:Src/ethernetif.c ****   #pragma data_alignment=4   
  85:Src/ethernetif.c **** #endif
  86:Src/ethernetif.c **** __ALIGN_BEGIN ETH_DMADescTypeDef  DMATxDscrTab[ETH_TXBUFNB] __ALIGN_END;/* Ethernet Tx DMA Descript
  87:Src/ethernetif.c **** 
ARM GAS  /tmp/ccyCW88r.s 			page 3


  88:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  89:Src/ethernetif.c ****   #pragma data_alignment=4   
  90:Src/ethernetif.c **** #endif
  91:Src/ethernetif.c **** __ALIGN_BEGIN uint8_t Rx_Buff[ETH_RXBUFNB][ETH_RX_BUF_SIZE] __ALIGN_END; /* Ethernet Receive Buffer
  92:Src/ethernetif.c **** 
  93:Src/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  94:Src/ethernetif.c ****   #pragma data_alignment=4   
  95:Src/ethernetif.c **** #endif
  96:Src/ethernetif.c **** __ALIGN_BEGIN uint8_t Tx_Buff[ETH_TXBUFNB][ETH_TX_BUF_SIZE] __ALIGN_END; /* Ethernet Transmit Buffe
  97:Src/ethernetif.c **** 
  98:Src/ethernetif.c **** /* USER CODE BEGIN 2 */
  99:Src/ethernetif.c **** 
 100:Src/ethernetif.c **** /* USER CODE END 2 */
 101:Src/ethernetif.c **** 
 102:Src/ethernetif.c **** /* Global Ethernet handle */
 103:Src/ethernetif.c **** ETH_HandleTypeDef heth;
 104:Src/ethernetif.c **** 
 105:Src/ethernetif.c **** /* USER CODE BEGIN 3 */
 106:Src/ethernetif.c **** 
 107:Src/ethernetif.c **** /* USER CODE END 3 */
 108:Src/ethernetif.c **** 
 109:Src/ethernetif.c **** /* Private functions ---------------------------------------------------------*/
 110:Src/ethernetif.c **** 
 111:Src/ethernetif.c **** void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
 112:Src/ethernetif.c **** {
 113:Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 114:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 115:Src/ethernetif.c ****   {
 116:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 0 */
 117:Src/ethernetif.c **** 
 118:Src/ethernetif.c ****   /* USER CODE END ETH_MspInit 0 */
 119:Src/ethernetif.c ****     /* Enable Peripheral clock */
 120:Src/ethernetif.c ****     __HAL_RCC_ETH_CLK_ENABLE();
 121:Src/ethernetif.c ****   
 122:Src/ethernetif.c ****     /**ETH GPIO Configuration    
 123:Src/ethernetif.c ****     PG14     ------> ETH_TXD1
 124:Src/ethernetif.c ****     PG13     ------> ETH_TXD0
 125:Src/ethernetif.c ****     PG11     ------> ETH_TX_EN
 126:Src/ethernetif.c ****     PC1     ------> ETH_MDC
 127:Src/ethernetif.c ****     PA1     ------> ETH_REF_CLK
 128:Src/ethernetif.c ****     PC4     ------> ETH_RXD0
 129:Src/ethernetif.c ****     PA2     ------> ETH_MDIO
 130:Src/ethernetif.c ****     PC5     ------> ETH_RXD1
 131:Src/ethernetif.c ****     PA7     ------> ETH_CRS_DV 
 132:Src/ethernetif.c ****     */
 133:Src/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 134:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 135:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 136:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 137:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 138:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 139:Src/ethernetif.c **** 
 140:Src/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 141:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 142:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 143:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 144:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
ARM GAS  /tmp/ccyCW88r.s 			page 4


 145:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 146:Src/ethernetif.c **** 
 147:Src/ethernetif.c ****     GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 148:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 149:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 150:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 151:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 152:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 153:Src/ethernetif.c **** 
 154:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 1 */
 155:Src/ethernetif.c **** 
 156:Src/ethernetif.c ****   /* USER CODE END ETH_MspInit 1 */
 157:Src/ethernetif.c ****   }
 158:Src/ethernetif.c **** }
 159:Src/ethernetif.c **** 
 160:Src/ethernetif.c **** void HAL_ETH_MspDeInit(ETH_HandleTypeDef* ethHandle)
 161:Src/ethernetif.c **** {
 162:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 163:Src/ethernetif.c ****   {
 164:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 0 */
 165:Src/ethernetif.c **** 
 166:Src/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 0 */
 167:Src/ethernetif.c ****     /* Peripheral clock disable */
 168:Src/ethernetif.c ****     __HAL_RCC_ETH_CLK_DISABLE();
 169:Src/ethernetif.c ****   
 170:Src/ethernetif.c ****     /**ETH GPIO Configuration    
 171:Src/ethernetif.c ****     PG14     ------> ETH_TXD1
 172:Src/ethernetif.c ****     PG13     ------> ETH_TXD0
 173:Src/ethernetif.c ****     PG11     ------> ETH_TX_EN
 174:Src/ethernetif.c ****     PC1     ------> ETH_MDC
 175:Src/ethernetif.c ****     PA1     ------> ETH_REF_CLK
 176:Src/ethernetif.c ****     PC4     ------> ETH_RXD0
 177:Src/ethernetif.c ****     PA2     ------> ETH_MDIO
 178:Src/ethernetif.c ****     PC5     ------> ETH_RXD1
 179:Src/ethernetif.c ****     PA7     ------> ETH_CRS_DV 
 180:Src/ethernetif.c ****     */
 181:Src/ethernetif.c ****     HAL_GPIO_DeInit(GPIOG, RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin);
 182:Src/ethernetif.c **** 
 183:Src/ethernetif.c ****     HAL_GPIO_DeInit(GPIOC, RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin);
 184:Src/ethernetif.c **** 
 185:Src/ethernetif.c ****     HAL_GPIO_DeInit(GPIOA, RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin);
 186:Src/ethernetif.c **** 
 187:Src/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 1 */
 188:Src/ethernetif.c **** 
 189:Src/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 1 */
 190:Src/ethernetif.c ****   }
 191:Src/ethernetif.c **** }
 192:Src/ethernetif.c **** 
 193:Src/ethernetif.c **** /* USER CODE BEGIN 4 */
 194:Src/ethernetif.c **** 
 195:Src/ethernetif.c **** /* USER CODE END 4 */
 196:Src/ethernetif.c **** 
 197:Src/ethernetif.c **** /*******************************************************************************
 198:Src/ethernetif.c ****                        LL Driver Interface ( LwIP stack --> ETH) 
 199:Src/ethernetif.c **** *******************************************************************************/
 200:Src/ethernetif.c **** /**
 201:Src/ethernetif.c ****  * In this function, the hardware should be initialized.
ARM GAS  /tmp/ccyCW88r.s 			page 5


 202:Src/ethernetif.c ****  * Called from ethernetif_init().
 203:Src/ethernetif.c ****  *
 204:Src/ethernetif.c ****  * @param netif the already initialized lwip network interface structure
 205:Src/ethernetif.c ****  *        for this ethernetif
 206:Src/ethernetif.c ****  */
 207:Src/ethernetif.c **** static void low_level_init(struct netif *netif)
 208:Src/ethernetif.c **** { 
 209:Src/ethernetif.c ****   uint32_t regvalue = 0;
 210:Src/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status;
 211:Src/ethernetif.c ****   
 212:Src/ethernetif.c **** /* Init ETH */
 213:Src/ethernetif.c **** 
 214:Src/ethernetif.c ****    uint8_t MACAddr[6] ;
 215:Src/ethernetif.c ****   heth.Instance = ETH;
 216:Src/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 217:Src/ethernetif.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 218:Src/ethernetif.c ****   MACAddr[0] = 0x00;
 219:Src/ethernetif.c ****   MACAddr[1] = 0x6D;
 220:Src/ethernetif.c ****   MACAddr[2] = 0x69;
 221:Src/ethernetif.c ****   MACAddr[3] = 0x6B;
 222:Src/ethernetif.c ****   MACAddr[4] = 0x75;
 223:Src/ethernetif.c ****   MACAddr[5] = 0x01;
 224:Src/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 225:Src/ethernetif.c ****   heth.Init.RxMode = ETH_RXPOLLING_MODE;
 226:Src/ethernetif.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 227:Src/ethernetif.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 228:Src/ethernetif.c **** 
 229:Src/ethernetif.c ****   /* USER CODE BEGIN MACADDRESS */
 230:Src/ethernetif.c ****     
 231:Src/ethernetif.c ****   /* USER CODE END MACADDRESS */
 232:Src/ethernetif.c **** 
 233:Src/ethernetif.c ****   hal_eth_init_status = HAL_ETH_Init(&heth);
 234:Src/ethernetif.c **** 
 235:Src/ethernetif.c ****   if (hal_eth_init_status == HAL_OK)
 236:Src/ethernetif.c ****   {
 237:Src/ethernetif.c ****     /* Set netif link flag */  
 238:Src/ethernetif.c ****     netif->flags |= NETIF_FLAG_LINK_UP;
 239:Src/ethernetif.c ****   }
 240:Src/ethernetif.c ****   /* Initialize Tx Descriptors list: Chain Mode */
 241:Src/ethernetif.c ****   HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 242:Src/ethernetif.c ****      
 243:Src/ethernetif.c ****   /* Initialize Rx Descriptors list: Chain Mode  */
 244:Src/ethernetif.c ****   HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 245:Src/ethernetif.c ****  
 246:Src/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET 
 247:Src/ethernetif.c **** 
 248:Src/ethernetif.c ****   /* set MAC hardware address length */
 249:Src/ethernetif.c ****   netif->hwaddr_len = ETH_HWADDR_LEN;
 250:Src/ethernetif.c ****   
 251:Src/ethernetif.c ****   /* set MAC hardware address */
 252:Src/ethernetif.c ****   netif->hwaddr[0] =  heth.Init.MACAddr[0];
 253:Src/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 254:Src/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 255:Src/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 256:Src/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 257:Src/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 258:Src/ethernetif.c ****   
ARM GAS  /tmp/ccyCW88r.s 			page 6


 259:Src/ethernetif.c ****   /* maximum transfer unit */
 260:Src/ethernetif.c ****   netif->mtu = 1500;
 261:Src/ethernetif.c ****   
 262:Src/ethernetif.c ****   /* Accept broadcast address and ARP traffic */
 263:Src/ethernetif.c ****   /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
 264:Src/ethernetif.c ****   #if LWIP_ARP
 265:Src/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 266:Src/ethernetif.c ****   #else 
 267:Src/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST;
 268:Src/ethernetif.c ****   #endif /* LWIP_ARP */
 269:Src/ethernetif.c ****   
 270:Src/ethernetif.c ****   /* Enable MAC and DMA transmission and reception */
 271:Src/ethernetif.c ****   HAL_ETH_Start(&heth);
 272:Src/ethernetif.c **** 
 273:Src/ethernetif.c **** /* USER CODE BEGIN PHY_PRE_CONFIG */ 
 274:Src/ethernetif.c ****     
 275:Src/ethernetif.c **** /* USER CODE END PHY_PRE_CONFIG */
 276:Src/ethernetif.c ****   
 277:Src/ethernetif.c **** 
 278:Src/ethernetif.c ****   /* Read Register Configuration */
 279:Src/ethernetif.c ****   HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 280:Src/ethernetif.c ****   regvalue |= (PHY_ISFR_INT4);
 281:Src/ethernetif.c **** 
 282:Src/ethernetif.c ****   /* Enable Interrupt on change of link status */ 
 283:Src/ethernetif.c ****   HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 284:Src/ethernetif.c ****   
 285:Src/ethernetif.c ****   /* Read Register Configuration */
 286:Src/ethernetif.c ****   HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 287:Src/ethernetif.c **** 
 288:Src/ethernetif.c **** /* USER CODE BEGIN PHY_POST_CONFIG */ 
 289:Src/ethernetif.c ****     
 290:Src/ethernetif.c **** /* USER CODE END PHY_POST_CONFIG */
 291:Src/ethernetif.c **** 
 292:Src/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 293:Src/ethernetif.c **** 
 294:Src/ethernetif.c **** /* USER CODE BEGIN LOW_LEVEL_INIT */ 
 295:Src/ethernetif.c ****     
 296:Src/ethernetif.c **** /* USER CODE END LOW_LEVEL_INIT */
 297:Src/ethernetif.c **** }
 298:Src/ethernetif.c **** 
 299:Src/ethernetif.c **** /**
 300:Src/ethernetif.c ****  * This function should do the actual transmission of the packet. The packet is
 301:Src/ethernetif.c ****  * contained in the pbuf that is passed to the function. This pbuf
 302:Src/ethernetif.c ****  * might be chained.
 303:Src/ethernetif.c ****  *
 304:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 305:Src/ethernetif.c ****  * @param p the MAC packet to send (e.g. IP packet including MAC addresses and type)
 306:Src/ethernetif.c ****  * @return ERR_OK if the packet could be sent
 307:Src/ethernetif.c ****  *         an err_t value if the packet couldn't be sent
 308:Src/ethernetif.c ****  *
 309:Src/ethernetif.c ****  * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 310:Src/ethernetif.c ****  *       strange results. You might consider waiting for space in the DMA queue
 311:Src/ethernetif.c ****  *       to become availale since the stack doesn't retry to send a packet
 312:Src/ethernetif.c ****  *       dropped because of memory failure (except for the TCP timers).
 313:Src/ethernetif.c ****  */
 314:Src/ethernetif.c **** 
 315:Src/ethernetif.c **** static err_t low_level_output(struct netif *netif, struct pbuf *p)
ARM GAS  /tmp/ccyCW88r.s 			page 7


 316:Src/ethernetif.c **** {
 317:Src/ethernetif.c ****   err_t errval;
 318:Src/ethernetif.c ****   struct pbuf *q;
 319:Src/ethernetif.c ****   uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 320:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 321:Src/ethernetif.c ****   uint32_t framelength = 0;
 322:Src/ethernetif.c ****   uint32_t bufferoffset = 0;
 323:Src/ethernetif.c ****   uint32_t byteslefttocopy = 0;
 324:Src/ethernetif.c ****   uint32_t payloadoffset = 0;
 325:Src/ethernetif.c ****   DmaTxDesc = heth.TxDesc;
 326:Src/ethernetif.c ****   bufferoffset = 0;
 327:Src/ethernetif.c ****   
 328:Src/ethernetif.c ****   /* copy frame from pbufs to driver buffers */
 329:Src/ethernetif.c ****   for(q = p; q != NULL; q = q->next)
 330:Src/ethernetif.c ****     {
 331:Src/ethernetif.c ****       /* Is this buffer available? If not, goto error */
 332:Src/ethernetif.c ****       if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 333:Src/ethernetif.c ****       {
 334:Src/ethernetif.c ****         errval = ERR_USE;
 335:Src/ethernetif.c ****         goto error;
 336:Src/ethernetif.c ****       }
 337:Src/ethernetif.c ****     
 338:Src/ethernetif.c ****       /* Get bytes in current lwIP buffer */
 339:Src/ethernetif.c ****       byteslefttocopy = q->len;
 340:Src/ethernetif.c ****       payloadoffset = 0;
 341:Src/ethernetif.c ****     
 342:Src/ethernetif.c ****       /* Check if the length of data to copy is bigger than Tx buffer size*/
 343:Src/ethernetif.c ****       while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 344:Src/ethernetif.c ****       {
 345:Src/ethernetif.c ****         /* Copy data to Tx buffer*/
 346:Src/ethernetif.c ****         memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payl
 347:Src/ethernetif.c ****       
 348:Src/ethernetif.c ****         /* Point to next descriptor */
 349:Src/ethernetif.c ****         DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 350:Src/ethernetif.c ****       
 351:Src/ethernetif.c ****         /* Check if the buffer is available */
 352:Src/ethernetif.c ****         if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 353:Src/ethernetif.c ****         {
 354:Src/ethernetif.c ****           errval = ERR_USE;
 355:Src/ethernetif.c ****           goto error;
 356:Src/ethernetif.c ****         }
 357:Src/ethernetif.c ****       
 358:Src/ethernetif.c ****         buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 359:Src/ethernetif.c ****       
 360:Src/ethernetif.c ****         byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 361:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 362:Src/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 363:Src/ethernetif.c ****         bufferoffset = 0;
 364:Src/ethernetif.c ****       }
 365:Src/ethernetif.c ****     
 366:Src/ethernetif.c ****       /* Copy the remaining bytes */
 367:Src/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloa
 368:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 369:Src/ethernetif.c ****       framelength = framelength + byteslefttocopy;
 370:Src/ethernetif.c ****     }
 371:Src/ethernetif.c ****   
 372:Src/ethernetif.c ****   /* Prepare transmit descriptors to give to DMA */ 
ARM GAS  /tmp/ccyCW88r.s 			page 8


 373:Src/ethernetif.c ****   HAL_ETH_TransmitFrame(&heth, framelength);
 374:Src/ethernetif.c ****   
 375:Src/ethernetif.c ****   errval = ERR_OK;
 376:Src/ethernetif.c ****   
 377:Src/ethernetif.c **** error:
 378:Src/ethernetif.c ****   
 379:Src/ethernetif.c ****   /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume trans
 380:Src/ethernetif.c ****   if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 381:Src/ethernetif.c ****   {
 382:Src/ethernetif.c ****     /* Clear TUS ETHERNET DMA flag */
 383:Src/ethernetif.c ****     heth.Instance->DMASR = ETH_DMASR_TUS;
 384:Src/ethernetif.c **** 
 385:Src/ethernetif.c ****     /* Resume DMA transmission*/
 386:Src/ethernetif.c ****     heth.Instance->DMATPDR = 0;
 387:Src/ethernetif.c ****   }
 388:Src/ethernetif.c ****   return errval;
 389:Src/ethernetif.c **** }
 390:Src/ethernetif.c **** 
 391:Src/ethernetif.c **** /**
 392:Src/ethernetif.c ****  * Should allocate a pbuf and transfer the bytes of the incoming
 393:Src/ethernetif.c ****  * packet from the interface into the pbuf.
 394:Src/ethernetif.c ****  *
 395:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 396:Src/ethernetif.c ****  * @return a pbuf filled with the received packet (including MAC header)
 397:Src/ethernetif.c ****  *         NULL on memory error
 398:Src/ethernetif.c ****    */
 399:Src/ethernetif.c **** static struct pbuf * low_level_input(struct netif *netif)
 400:Src/ethernetif.c **** {
  29              		.loc 1 400 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 400 1 is_stmt 0 view .LVU1
  34 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 32
  37              		.cfi_offset 4, -32
  38              		.cfi_offset 5, -28
  39              		.cfi_offset 6, -24
  40              		.cfi_offset 7, -20
  41              		.cfi_offset 8, -16
  42              		.cfi_offset 9, -12
  43              		.cfi_offset 10, -8
  44              		.cfi_offset 14, -4
 401:Src/ethernetif.c ****   struct pbuf *p = NULL;
  45              		.loc 1 401 3 is_stmt 1 view .LVU2
  46              	.LVL1:
 402:Src/ethernetif.c ****   struct pbuf *q = NULL;
  47              		.loc 1 402 3 view .LVU3
 403:Src/ethernetif.c ****   uint16_t len = 0;
  48              		.loc 1 403 3 view .LVU4
 404:Src/ethernetif.c ****   uint8_t *buffer;
  49              		.loc 1 404 3 view .LVU5
 405:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *dmarxdesc;
  50              		.loc 1 405 3 view .LVU6
 406:Src/ethernetif.c ****   uint32_t bufferoffset = 0;
  51              		.loc 1 406 3 view .LVU7
ARM GAS  /tmp/ccyCW88r.s 			page 9


 407:Src/ethernetif.c ****   uint32_t payloadoffset = 0;
  52              		.loc 1 407 3 view .LVU8
 408:Src/ethernetif.c ****   uint32_t byteslefttocopy = 0;
  53              		.loc 1 408 3 view .LVU9
 409:Src/ethernetif.c ****   uint32_t i=0;
  54              		.loc 1 409 3 view .LVU10
 410:Src/ethernetif.c ****   
 411:Src/ethernetif.c **** 
 412:Src/ethernetif.c ****   /* get received frame */
 413:Src/ethernetif.c ****   if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
  55              		.loc 1 413 3 view .LVU11
  56              		.loc 1 413 7 is_stmt 0 view .LVU12
  57 0004 3348     		ldr	r0, .L16
  58              	.LVL2:
  59              		.loc 1 413 7 view .LVU13
  60 0006 FFF7FEFF 		bl	HAL_ETH_GetReceivedFrame
  61              	.LVL3:
  62              		.loc 1 413 6 view .LVU14
  63 000a 0028     		cmp	r0, #0
  64 000c 5ED1     		bne	.L10
 414:Src/ethernetif.c ****     return NULL;
 415:Src/ethernetif.c ****   
 416:Src/ethernetif.c ****   /* Obtain the size of the packet and put it into the "len" variable. */
 417:Src/ethernetif.c ****   len = heth.RxFrameInfos.length;
  65              		.loc 1 417 3 is_stmt 1 view .LVU15
  66              		.loc 1 417 26 is_stmt 0 view .LVU16
  67 000e 314B     		ldr	r3, .L16
  68              		.loc 1 417 7 view .LVU17
  69 0010 998F     		ldrh	r1, [r3, #60]
  70              	.LVL4:
 418:Src/ethernetif.c ****   buffer = (uint8_t *)heth.RxFrameInfos.buffer;
  71              		.loc 1 418 3 is_stmt 1 view .LVU18
  72              		.loc 1 418 40 is_stmt 0 view .LVU19
  73 0012 D3F84080 		ldr	r8, [r3, #64]
  74              	.LVL5:
 419:Src/ethernetif.c ****   
 420:Src/ethernetif.c ****   if (len > 0)
  75              		.loc 1 420 3 is_stmt 1 view .LVU20
  76              		.loc 1 420 6 is_stmt 0 view .LVU21
  77 0016 79B9     		cbnz	r1, .L13
 401:Src/ethernetif.c ****   struct pbuf *q = NULL;
  78              		.loc 1 401 16 view .LVU22
  79 0018 4FF0000A 		mov	r10, #0
  80              	.LVL6:
  81              	.L3:
 421:Src/ethernetif.c ****   {
 422:Src/ethernetif.c ****     /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
 423:Src/ethernetif.c ****     p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 424:Src/ethernetif.c ****   }
 425:Src/ethernetif.c ****   
 426:Src/ethernetif.c ****   if (p != NULL)
 427:Src/ethernetif.c ****   {
 428:Src/ethernetif.c ****     dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 429:Src/ethernetif.c ****     bufferoffset = 0;
 430:Src/ethernetif.c ****     for(q = p; q != NULL; q = q->next)
 431:Src/ethernetif.c ****     {
 432:Src/ethernetif.c ****       byteslefttocopy = q->len;
ARM GAS  /tmp/ccyCW88r.s 			page 10


 433:Src/ethernetif.c ****       payloadoffset = 0;
 434:Src/ethernetif.c ****       
 435:Src/ethernetif.c ****       /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
 436:Src/ethernetif.c ****       while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 437:Src/ethernetif.c ****       {
 438:Src/ethernetif.c ****         /* Copy data to pbuf */
 439:Src/ethernetif.c ****         memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buf
 440:Src/ethernetif.c ****         
 441:Src/ethernetif.c ****         /* Point to next descriptor */
 442:Src/ethernetif.c ****         dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 443:Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 444:Src/ethernetif.c ****         
 445:Src/ethernetif.c ****         byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 446:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 447:Src/ethernetif.c ****         bufferoffset = 0;
 448:Src/ethernetif.c ****       }
 449:Src/ethernetif.c ****       /* Copy remaining data in pbuf */
 450:Src/ethernetif.c ****       memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + buffe
 451:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 452:Src/ethernetif.c ****     }
 453:Src/ethernetif.c ****   }  
 454:Src/ethernetif.c ****   
 455:Src/ethernetif.c ****     /* Release descriptors to DMA */
 456:Src/ethernetif.c ****     /* Point to first descriptor */
 457:Src/ethernetif.c ****     dmarxdesc = heth.RxFrameInfos.FSRxDesc;
  82              		.loc 1 457 5 is_stmt 1 view .LVU23
  83              		.loc 1 457 15 is_stmt 0 view .LVU24
  84 001c 2D4B     		ldr	r3, .L16
  85 001e 1B6B     		ldr	r3, [r3, #48]
  86              	.LVL7:
 458:Src/ethernetif.c ****     /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
 459:Src/ethernetif.c ****     for (i=0; i< heth.RxFrameInfos.SegCount; i++)
  87              		.loc 1 459 5 is_stmt 1 view .LVU25
  88              		.loc 1 459 11 is_stmt 0 view .LVU26
  89 0020 0021     		movs	r1, #0
  90              	.LVL8:
  91              	.L8:
  92              		.loc 1 459 35 discriminator 1 view .LVU27
  93 0022 2C4A     		ldr	r2, .L16
  94 0024 926B     		ldr	r2, [r2, #56]
  95              		.loc 1 459 5 discriminator 1 view .LVU28
  96 0026 8A42     		cmp	r2, r1
  97 0028 3BD9     		bls	.L14
 460:Src/ethernetif.c ****     {  
 461:Src/ethernetif.c ****       dmarxdesc->Status |= ETH_DMARXDESC_OWN;
  98              		.loc 1 461 7 is_stmt 1 discriminator 3 view .LVU29
  99              		.loc 1 461 25 is_stmt 0 discriminator 3 view .LVU30
 100 002a 1A68     		ldr	r2, [r3]
 101 002c 42F00042 		orr	r2, r2, #-2147483648
 102 0030 1A60     		str	r2, [r3]
 462:Src/ethernetif.c ****       dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 103              		.loc 1 462 7 is_stmt 1 discriminator 3 view .LVU31
 104              		.loc 1 462 51 is_stmt 0 discriminator 3 view .LVU32
 105 0032 DB68     		ldr	r3, [r3, #12]
 106              	.LVL9:
 459:Src/ethernetif.c ****     {  
 107              		.loc 1 459 47 discriminator 3 view .LVU33
ARM GAS  /tmp/ccyCW88r.s 			page 11


 108 0034 0131     		adds	r1, r1, #1
 109              	.LVL10:
 459:Src/ethernetif.c ****     {  
 110              		.loc 1 459 47 discriminator 3 view .LVU34
 111 0036 F4E7     		b	.L8
 112              	.LVL11:
 113              	.L13:
 423:Src/ethernetif.c ****   }
 114              		.loc 1 423 5 is_stmt 1 view .LVU35
 423:Src/ethernetif.c ****   }
 115              		.loc 1 423 9 is_stmt 0 view .LVU36
 116 0038 0322     		movs	r2, #3
 117 003a 0420     		movs	r0, #4
 118 003c FFF7FEFF 		bl	pbuf_alloc
 119              	.LVL12:
 426:Src/ethernetif.c ****   {
 120              		.loc 1 426 3 is_stmt 1 view .LVU37
 426:Src/ethernetif.c ****   {
 121              		.loc 1 426 6 is_stmt 0 view .LVU38
 122 0040 8246     		mov	r10, r0
 123 0042 0028     		cmp	r0, #0
 124 0044 EAD0     		beq	.L3
 428:Src/ethernetif.c ****     bufferoffset = 0;
 125              		.loc 1 428 5 is_stmt 1 view .LVU39
 428:Src/ethernetif.c ****     bufferoffset = 0;
 126              		.loc 1 428 15 is_stmt 0 view .LVU40
 127 0046 234B     		ldr	r3, .L16
 128 0048 1F6B     		ldr	r7, [r3, #48]
 129              	.LVL13:
 429:Src/ethernetif.c ****     for(q = p; q != NULL; q = q->next)
 130              		.loc 1 429 5 is_stmt 1 view .LVU41
 430:Src/ethernetif.c ****     {
 131              		.loc 1 430 5 view .LVU42
 423:Src/ethernetif.c ****   }
 132              		.loc 1 423 9 is_stmt 0 view .LVU43
 133 004a 8146     		mov	r9, r0
 429:Src/ethernetif.c ****     for(q = p; q != NULL; q = q->next)
 134              		.loc 1 429 18 view .LVU44
 135 004c 0024     		movs	r4, #0
 430:Src/ethernetif.c ****     {
 136              		.loc 1 430 5 view .LVU45
 137 004e 09E0     		b	.L4
 138              	.LVL14:
 139              	.L15:
 450:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 140              		.loc 1 450 7 is_stmt 1 discriminator 2 view .LVU46
 450:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 141              		.loc 1 450 37 is_stmt 0 discriminator 2 view .LVU47
 142 0050 D9F80400 		ldr	r0, [r9, #4]
 450:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 143              		.loc 1 450 7 discriminator 2 view .LVU48
 144 0054 08EB0401 		add	r1, r8, r4
 145 0058 3044     		add	r0, r0, r6
 146 005a FFF7FEFF 		bl	memcpy
 147              	.LVL15:
 451:Src/ethernetif.c ****     }
 148              		.loc 1 451 7 is_stmt 1 discriminator 2 view .LVU49
ARM GAS  /tmp/ccyCW88r.s 			page 12


 430:Src/ethernetif.c ****     {
 149              		.loc 1 430 29 is_stmt 0 discriminator 2 view .LVU50
 150 005e D9F80090 		ldr	r9, [r9]
 151              	.LVL16:
 451:Src/ethernetif.c ****     }
 152              		.loc 1 451 20 discriminator 2 view .LVU51
 153 0062 2C46     		mov	r4, r5
 154              	.LVL17:
 155              	.L4:
 430:Src/ethernetif.c ****     {
 156              		.loc 1 430 5 discriminator 1 view .LVU52
 157 0064 B9F1000F 		cmp	r9, #0
 158 0068 D8D0     		beq	.L3
 432:Src/ethernetif.c ****       payloadoffset = 0;
 159              		.loc 1 432 7 is_stmt 1 view .LVU53
 432:Src/ethernetif.c ****       payloadoffset = 0;
 160              		.loc 1 432 26 is_stmt 0 view .LVU54
 161 006a B9F80A20 		ldrh	r2, [r9, #10]
 162              	.LVL18:
 433:Src/ethernetif.c ****       
 163              		.loc 1 433 7 is_stmt 1 view .LVU55
 436:Src/ethernetif.c ****       {
 164              		.loc 1 436 7 view .LVU56
 433:Src/ethernetif.c ****       
 165              		.loc 1 433 21 is_stmt 0 view .LVU57
 166 006e 0026     		movs	r6, #0
 167              	.LVL19:
 168              	.L5:
 436:Src/ethernetif.c ****       {
 169              		.loc 1 436 31 view .LVU58
 170 0070 A518     		adds	r5, r4, r2
 436:Src/ethernetif.c ****       {
 171              		.loc 1 436 12 view .LVU59
 172 0072 40F2F453 		movw	r3, #1524
 173 0076 9D42     		cmp	r5, r3
 174 0078 EAD9     		bls	.L15
 439:Src/ethernetif.c ****         
 175              		.loc 1 439 9 is_stmt 1 view .LVU60
 439:Src/ethernetif.c ****         
 176              		.loc 1 439 39 is_stmt 0 view .LVU61
 177 007a D9F80400 		ldr	r0, [r9, #4]
 439:Src/ethernetif.c ****         
 178              		.loc 1 439 9 view .LVU62
 179 007e 40F2F452 		movw	r2, #1524
 180              	.LVL20:
 439:Src/ethernetif.c ****         
 181              		.loc 1 439 9 view .LVU63
 182 0082 121B     		subs	r2, r2, r4
 183 0084 08EB0401 		add	r1, r8, r4
 184 0088 3044     		add	r0, r0, r6
 185 008a FFF7FEFF 		bl	memcpy
 186              	.LVL21:
 442:Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 187              		.loc 1 442 9 is_stmt 1 view .LVU64
 442:Src/ethernetif.c ****         buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 188              		.loc 1 442 53 is_stmt 0 view .LVU65
 189 008e FF68     		ldr	r7, [r7, #12]
ARM GAS  /tmp/ccyCW88r.s 			page 13


 190              	.LVL22:
 443:Src/ethernetif.c ****         
 191              		.loc 1 443 9 is_stmt 1 view .LVU66
 443:Src/ethernetif.c ****         
 192              		.loc 1 443 39 is_stmt 0 view .LVU67
 193 0090 D7F80880 		ldr	r8, [r7, #8]
 194              	.LVL23:
 445:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 195              		.loc 1 445 9 is_stmt 1 view .LVU68
 445:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 196              		.loc 1 445 25 is_stmt 0 view .LVU69
 197 0094 A5F2F452 		subw	r2, r5, #1524
 198              	.LVL24:
 446:Src/ethernetif.c ****         bufferoffset = 0;
 199              		.loc 1 446 9 is_stmt 1 view .LVU70
 446:Src/ethernetif.c ****         bufferoffset = 0;
 200              		.loc 1 446 39 is_stmt 0 view .LVU71
 201 0098 361B     		subs	r6, r6, r4
 202              	.LVL25:
 446:Src/ethernetif.c ****         bufferoffset = 0;
 203              		.loc 1 446 23 view .LVU72
 204 009a 06F2F456 		addw	r6, r6, #1524
 205              	.LVL26:
 447:Src/ethernetif.c ****       }
 206              		.loc 1 447 9 is_stmt 1 view .LVU73
 447:Src/ethernetif.c ****       }
 207              		.loc 1 447 22 is_stmt 0 view .LVU74
 208 009e 0024     		movs	r4, #0
 209 00a0 E6E7     		b	.L5
 210              	.LVL27:
 211              	.L14:
 463:Src/ethernetif.c ****     }
 464:Src/ethernetif.c ****     
 465:Src/ethernetif.c ****     /* Clear Segment_Count */
 466:Src/ethernetif.c ****     heth.RxFrameInfos.SegCount =0;  
 212              		.loc 1 466 5 is_stmt 1 view .LVU75
 213              		.loc 1 466 32 is_stmt 0 view .LVU76
 214 00a2 0C4B     		ldr	r3, .L16
 215              	.LVL28:
 216              		.loc 1 466 32 view .LVU77
 217 00a4 0022     		movs	r2, #0
 218 00a6 9A63     		str	r2, [r3, #56]
 467:Src/ethernetif.c ****   
 468:Src/ethernetif.c ****   /* When Rx Buffer unavailable flag is set: clear it and resume reception */
 469:Src/ethernetif.c ****   if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 219              		.loc 1 469 3 is_stmt 1 view .LVU78
 220              		.loc 1 469 12 is_stmt 0 view .LVU79
 221 00a8 1B68     		ldr	r3, [r3]
 222              		.loc 1 469 21 view .LVU80
 223 00aa 41F21402 		movw	r2, #4116
 224 00ae 9A58     		ldr	r2, [r3, r2]
 225              		.loc 1 469 6 view .LVU81
 226 00b0 12F0800F 		tst	r2, #128
 227 00b4 07D0     		beq	.L1
 470:Src/ethernetif.c ****   {
 471:Src/ethernetif.c ****     /* Clear RBUS ETHERNET DMA flag */
 472:Src/ethernetif.c ****     heth.Instance->DMASR = ETH_DMASR_RBUS;
ARM GAS  /tmp/ccyCW88r.s 			page 14


 228              		.loc 1 472 5 is_stmt 1 view .LVU82
 229              		.loc 1 472 26 is_stmt 0 view .LVU83
 230 00b6 41F21402 		movw	r2, #4116
 231 00ba 8021     		movs	r1, #128
 232              	.LVL29:
 233              		.loc 1 472 26 view .LVU84
 234 00bc 9950     		str	r1, [r3, r2]
 473:Src/ethernetif.c ****     /* Resume DMA reception */
 474:Src/ethernetif.c ****     heth.Instance->DMARPDR = 0;
 235              		.loc 1 474 5 is_stmt 1 view .LVU85
 236              		.loc 1 474 28 is_stmt 0 view .LVU86
 237 00be 41F20802 		movw	r2, #4104
 238 00c2 0021     		movs	r1, #0
 239 00c4 9950     		str	r1, [r3, r2]
 240              	.LVL30:
 241              	.L1:
 475:Src/ethernetif.c ****   }
 476:Src/ethernetif.c ****   return p;
 477:Src/ethernetif.c **** }
 242              		.loc 1 477 1 view .LVU87
 243 00c6 5046     		mov	r0, r10
 244 00c8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 245              	.LVL31:
 246              	.L10:
 414:Src/ethernetif.c ****   
 247              		.loc 1 414 12 view .LVU88
 248 00cc 4FF0000A 		mov	r10, #0
 249 00d0 F9E7     		b	.L1
 250              	.L17:
 251 00d2 00BF     		.align	2
 252              	.L16:
 253 00d4 00000000 		.word	heth
 254              		.cfi_endproc
 255              	.LFE164:
 257              		.section	.text.low_level_output,"ax",%progbits
 258              		.align	1
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.fpu fpv5-sp-d16
 264              	low_level_output:
 265              	.LVL32:
 266              	.LFB163:
 316:Src/ethernetif.c ****   err_t errval;
 267              		.loc 1 316 1 is_stmt 1 view -0
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 0
 270              		@ frame_needed = 0, uses_anonymous_args = 0
 316:Src/ethernetif.c ****   err_t errval;
 271              		.loc 1 316 1 is_stmt 0 view .LVU90
 272 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 273              	.LCFI1:
 274              		.cfi_def_cfa_offset 40
 275              		.cfi_offset 3, -40
 276              		.cfi_offset 4, -36
 277              		.cfi_offset 5, -32
 278              		.cfi_offset 6, -28
ARM GAS  /tmp/ccyCW88r.s 			page 15


 279              		.cfi_offset 7, -24
 280              		.cfi_offset 8, -20
 281              		.cfi_offset 9, -16
 282              		.cfi_offset 10, -12
 283              		.cfi_offset 11, -8
 284              		.cfi_offset 14, -4
 285 0004 8B46     		mov	fp, r1
 317:Src/ethernetif.c ****   struct pbuf *q;
 286              		.loc 1 317 3 is_stmt 1 view .LVU91
 318:Src/ethernetif.c ****   uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 287              		.loc 1 318 3 view .LVU92
 319:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 288              		.loc 1 319 3 view .LVU93
 319:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 289              		.loc 1 319 37 is_stmt 0 view .LVU94
 290 0006 2C4B     		ldr	r3, .L30
 291 0008 DE6A     		ldr	r6, [r3, #44]
 319:Src/ethernetif.c ****   __IO ETH_DMADescTypeDef *DmaTxDesc;
 292              		.loc 1 319 44 view .LVU95
 293 000a D6F808A0 		ldr	r10, [r6, #8]
 294              	.LVL33:
 320:Src/ethernetif.c ****   uint32_t framelength = 0;
 295              		.loc 1 320 3 is_stmt 1 view .LVU96
 321:Src/ethernetif.c ****   uint32_t bufferoffset = 0;
 296              		.loc 1 321 3 view .LVU97
 322:Src/ethernetif.c ****   uint32_t byteslefttocopy = 0;
 297              		.loc 1 322 3 view .LVU98
 323:Src/ethernetif.c ****   uint32_t payloadoffset = 0;
 298              		.loc 1 323 3 view .LVU99
 324:Src/ethernetif.c ****   DmaTxDesc = heth.TxDesc;
 299              		.loc 1 324 3 view .LVU100
 325:Src/ethernetif.c ****   bufferoffset = 0;
 300              		.loc 1 325 3 view .LVU101
 326:Src/ethernetif.c ****   
 301              		.loc 1 326 3 view .LVU102
 329:Src/ethernetif.c ****     {
 302              		.loc 1 329 3 view .LVU103
 326:Src/ethernetif.c ****   
 303              		.loc 1 326 16 is_stmt 0 view .LVU104
 304 000e 0024     		movs	r4, #0
 321:Src/ethernetif.c ****   uint32_t bufferoffset = 0;
 305              		.loc 1 321 12 view .LVU105
 306 0010 2746     		mov	r7, r4
 307              	.LVL34:
 308              	.L19:
 329:Src/ethernetif.c ****     {
 309              		.loc 1 329 3 discriminator 1 view .LVU106
 310 0012 BBF1000F 		cmp	fp, #0
 311 0016 32D0     		beq	.L28
 332:Src/ethernetif.c ****       {
 312              		.loc 1 332 7 is_stmt 1 view .LVU107
 332:Src/ethernetif.c ****       {
 313              		.loc 1 332 20 is_stmt 0 view .LVU108
 314 0018 3368     		ldr	r3, [r6]
 332:Src/ethernetif.c ****       {
 315              		.loc 1 332 9 view .LVU109
 316 001a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccyCW88r.s 			page 16


 317 001c 35DB     		blt	.L25
 339:Src/ethernetif.c ****       payloadoffset = 0;
 318              		.loc 1 339 7 is_stmt 1 view .LVU110
 339:Src/ethernetif.c ****       payloadoffset = 0;
 319              		.loc 1 339 26 is_stmt 0 view .LVU111
 320 001e BBF80A90 		ldrh	r9, [fp, #10]
 321              	.LVL35:
 340:Src/ethernetif.c ****     
 322              		.loc 1 340 7 is_stmt 1 view .LVU112
 343:Src/ethernetif.c ****       {
 323              		.loc 1 343 7 view .LVU113
 340:Src/ethernetif.c ****     
 324              		.loc 1 340 21 is_stmt 0 view .LVU114
 325 0022 0025     		movs	r5, #0
 326              	.LVL36:
 327              	.L21:
 343:Src/ethernetif.c ****       {
 328              		.loc 1 343 31 view .LVU115
 329 0024 04EB0908 		add	r8, r4, r9
 343:Src/ethernetif.c ****       {
 330              		.loc 1 343 12 view .LVU116
 331 0028 40F2F453 		movw	r3, #1524
 332 002c 9845     		cmp	r8, r3
 333 002e 19D9     		bls	.L29
 346:Src/ethernetif.c ****       
 334              		.loc 1 346 9 is_stmt 1 view .LVU117
 346:Src/ethernetif.c ****       
 335              		.loc 1 346 84 is_stmt 0 view .LVU118
 336 0030 DBF80410 		ldr	r1, [fp, #4]
 346:Src/ethernetif.c ****       
 337              		.loc 1 346 9 view .LVU119
 338 0034 40F2F452 		movw	r2, #1524
 339 0038 121B     		subs	r2, r2, r4
 340 003a 2944     		add	r1, r1, r5
 341 003c 0AEB0400 		add	r0, r10, r4
 342 0040 FFF7FEFF 		bl	memcpy
 343              	.LVL37:
 349:Src/ethernetif.c ****       
 344              		.loc 1 349 9 is_stmt 1 view .LVU120
 349:Src/ethernetif.c ****       
 345              		.loc 1 349 53 is_stmt 0 view .LVU121
 346 0044 F668     		ldr	r6, [r6, #12]
 347              	.LVL38:
 352:Src/ethernetif.c ****         {
 348              		.loc 1 352 9 is_stmt 1 view .LVU122
 352:Src/ethernetif.c ****         {
 349              		.loc 1 352 22 is_stmt 0 view .LVU123
 350 0046 3368     		ldr	r3, [r6]
 352:Src/ethernetif.c ****         {
 351              		.loc 1 352 11 view .LVU124
 352 0048 002B     		cmp	r3, #0
 353 004a 21DB     		blt	.L26
 358:Src/ethernetif.c ****       
 354              		.loc 1 358 9 is_stmt 1 view .LVU125
 358:Src/ethernetif.c ****       
 355              		.loc 1 358 39 is_stmt 0 view .LVU126
 356 004c D6F808A0 		ldr	r10, [r6, #8]
ARM GAS  /tmp/ccyCW88r.s 			page 17


 357              	.LVL39:
 360:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 358              		.loc 1 360 9 is_stmt 1 view .LVU127
 360:Src/ethernetif.c ****         payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 359              		.loc 1 360 25 is_stmt 0 view .LVU128
 360 0050 A8F2F459 		subw	r9, r8, #1524
 361              	.LVL40:
 361:Src/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 362              		.loc 1 361 9 is_stmt 1 view .LVU129
 361:Src/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 363              		.loc 1 361 39 is_stmt 0 view .LVU130
 364 0054 2D1B     		subs	r5, r5, r4
 365              	.LVL41:
 361:Src/ethernetif.c ****         framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 366              		.loc 1 361 23 view .LVU131
 367 0056 05F2F455 		addw	r5, r5, #1524
 368              	.LVL42:
 362:Src/ethernetif.c ****         bufferoffset = 0;
 369              		.loc 1 362 9 is_stmt 1 view .LVU132
 362:Src/ethernetif.c ****         bufferoffset = 0;
 370              		.loc 1 362 35 is_stmt 0 view .LVU133
 371 005a 3F1B     		subs	r7, r7, r4
 372              	.LVL43:
 362:Src/ethernetif.c ****         bufferoffset = 0;
 373              		.loc 1 362 21 view .LVU134
 374 005c 07F2F457 		addw	r7, r7, #1524
 375              	.LVL44:
 363:Src/ethernetif.c ****       }
 376              		.loc 1 363 9 is_stmt 1 view .LVU135
 363:Src/ethernetif.c ****       }
 377              		.loc 1 363 22 is_stmt 0 view .LVU136
 378 0060 0024     		movs	r4, #0
 379 0062 DFE7     		b	.L21
 380              	.LVL45:
 381              	.L29:
 367:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 382              		.loc 1 367 7 is_stmt 1 discriminator 2 view .LVU137
 367:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 383              		.loc 1 367 82 is_stmt 0 discriminator 2 view .LVU138
 384 0064 DBF80410 		ldr	r1, [fp, #4]
 367:Src/ethernetif.c ****       bufferoffset = bufferoffset + byteslefttocopy;
 385              		.loc 1 367 7 discriminator 2 view .LVU139
 386 0068 4A46     		mov	r2, r9
 387 006a 2944     		add	r1, r1, r5
 388 006c 0AEB0400 		add	r0, r10, r4
 389 0070 FFF7FEFF 		bl	memcpy
 390              	.LVL46:
 368:Src/ethernetif.c ****       framelength = framelength + byteslefttocopy;
 391              		.loc 1 368 7 is_stmt 1 discriminator 2 view .LVU140
 369:Src/ethernetif.c ****     }
 392              		.loc 1 369 7 discriminator 2 view .LVU141
 369:Src/ethernetif.c ****     }
 393              		.loc 1 369 19 is_stmt 0 discriminator 2 view .LVU142
 394 0074 4F44     		add	r7, r7, r9
 395              	.LVL47:
 329:Src/ethernetif.c ****     {
 396              		.loc 1 329 27 discriminator 2 view .LVU143
ARM GAS  /tmp/ccyCW88r.s 			page 18


 397 0076 DBF800B0 		ldr	fp, [fp]
 398              	.LVL48:
 368:Src/ethernetif.c ****       framelength = framelength + byteslefttocopy;
 399              		.loc 1 368 20 discriminator 2 view .LVU144
 400 007a 4446     		mov	r4, r8
 401 007c C9E7     		b	.L19
 402              	.LVL49:
 403              	.L28:
 373:Src/ethernetif.c ****   
 404              		.loc 1 373 3 is_stmt 1 view .LVU145
 405 007e 3946     		mov	r1, r7
 406 0080 0D48     		ldr	r0, .L30
 407 0082 FFF7FEFF 		bl	HAL_ETH_TransmitFrame
 408              	.LVL50:
 375:Src/ethernetif.c ****   
 409              		.loc 1 375 3 view .LVU146
 375:Src/ethernetif.c ****   
 410              		.loc 1 375 10 is_stmt 0 view .LVU147
 411 0086 0020     		movs	r0, #0
 412 0088 04E0     		b	.L20
 413              	.LVL51:
 414              	.L25:
 334:Src/ethernetif.c ****         goto error;
 415              		.loc 1 334 16 view .LVU148
 416 008a 6FF00700 		mvn	r0, #7
 417 008e 01E0     		b	.L20
 418              	.LVL52:
 419              	.L26:
 354:Src/ethernetif.c ****           goto error;
 420              		.loc 1 354 18 view .LVU149
 421 0090 6FF00700 		mvn	r0, #7
 422              	.LVL53:
 423              	.L20:
 380:Src/ethernetif.c ****   {
 424              		.loc 1 380 3 is_stmt 1 view .LVU150
 380:Src/ethernetif.c ****   {
 425              		.loc 1 380 12 is_stmt 0 view .LVU151
 426 0094 084B     		ldr	r3, .L30
 427 0096 1B68     		ldr	r3, [r3]
 380:Src/ethernetif.c ****   {
 428              		.loc 1 380 21 view .LVU152
 429 0098 41F21402 		movw	r2, #4116
 430 009c 9A58     		ldr	r2, [r3, r2]
 380:Src/ethernetif.c ****   {
 431              		.loc 1 380 6 view .LVU153
 432 009e 12F0200F 		tst	r2, #32
 433 00a2 07D0     		beq	.L24
 383:Src/ethernetif.c **** 
 434              		.loc 1 383 5 is_stmt 1 view .LVU154
 383:Src/ethernetif.c **** 
 435              		.loc 1 383 26 is_stmt 0 view .LVU155
 436 00a4 41F21402 		movw	r2, #4116
 437 00a8 2021     		movs	r1, #32
 438 00aa 9950     		str	r1, [r3, r2]
 386:Src/ethernetif.c ****   }
 439              		.loc 1 386 5 is_stmt 1 view .LVU156
 386:Src/ethernetif.c ****   }
ARM GAS  /tmp/ccyCW88r.s 			page 19


 440              		.loc 1 386 28 is_stmt 0 view .LVU157
 441 00ac 41F20402 		movw	r2, #4100
 442 00b0 0021     		movs	r1, #0
 443 00b2 9950     		str	r1, [r3, r2]
 444              	.L24:
 388:Src/ethernetif.c **** }
 445              		.loc 1 388 3 is_stmt 1 view .LVU158
 389:Src/ethernetif.c **** 
 446              		.loc 1 389 1 is_stmt 0 view .LVU159
 447 00b4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 448              	.LVL54:
 449              	.L31:
 389:Src/ethernetif.c **** 
 450              		.loc 1 389 1 view .LVU160
 451              		.align	2
 452              	.L30:
 453 00b8 00000000 		.word	heth
 454              		.cfi_endproc
 455              	.LFE163:
 457              		.section	.text.low_level_init,"ax",%progbits
 458              		.align	1
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv5-sp-d16
 464              	low_level_init:
 465              	.LVL55:
 466              	.LFB162:
 208:Src/ethernetif.c ****   uint32_t regvalue = 0;
 467              		.loc 1 208 1 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 16
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 208:Src/ethernetif.c ****   uint32_t regvalue = 0;
 471              		.loc 1 208 1 is_stmt 0 view .LVU162
 472 0000 30B5     		push	{r4, r5, lr}
 473              	.LCFI2:
 474              		.cfi_def_cfa_offset 12
 475              		.cfi_offset 4, -12
 476              		.cfi_offset 5, -8
 477              		.cfi_offset 14, -4
 478 0002 85B0     		sub	sp, sp, #20
 479              	.LCFI3:
 480              		.cfi_def_cfa_offset 32
 481 0004 0446     		mov	r4, r0
 209:Src/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status;
 482              		.loc 1 209 3 is_stmt 1 view .LVU163
 209:Src/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status;
 483              		.loc 1 209 12 is_stmt 0 view .LVU164
 484 0006 0023     		movs	r3, #0
 485 0008 0393     		str	r3, [sp, #12]
 210:Src/ethernetif.c ****   
 486              		.loc 1 210 3 is_stmt 1 view .LVU165
 214:Src/ethernetif.c ****   heth.Instance = ETH;
 487              		.loc 1 214 4 view .LVU166
 215:Src/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 488              		.loc 1 215 3 view .LVU167
ARM GAS  /tmp/ccyCW88r.s 			page 20


 215:Src/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 489              		.loc 1 215 17 is_stmt 0 view .LVU168
 490 000a 3448     		ldr	r0, .L35
 491              	.LVL56:
 215:Src/ethernetif.c ****   heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 492              		.loc 1 215 17 view .LVU169
 493 000c 344A     		ldr	r2, .L35+4
 494 000e 0260     		str	r2, [r0]
 216:Src/ethernetif.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 495              		.loc 1 216 3 is_stmt 1 view .LVU170
 216:Src/ethernetif.c ****   heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 496              		.loc 1 216 29 is_stmt 0 view .LVU171
 497 0010 0122     		movs	r2, #1
 498 0012 4260     		str	r2, [r0, #4]
 217:Src/ethernetif.c ****   MACAddr[0] = 0x00;
 499              		.loc 1 217 3 is_stmt 1 view .LVU172
 217:Src/ethernetif.c ****   MACAddr[0] = 0x00;
 500              		.loc 1 217 24 is_stmt 0 view .LVU173
 501 0014 0382     		strh	r3, [r0, #16]	@ movhi
 218:Src/ethernetif.c ****   MACAddr[1] = 0x6D;
 502              		.loc 1 218 3 is_stmt 1 view .LVU174
 218:Src/ethernetif.c ****   MACAddr[1] = 0x6D;
 503              		.loc 1 218 14 is_stmt 0 view .LVU175
 504 0016 8DF80430 		strb	r3, [sp, #4]
 219:Src/ethernetif.c ****   MACAddr[2] = 0x69;
 505              		.loc 1 219 3 is_stmt 1 view .LVU176
 219:Src/ethernetif.c ****   MACAddr[2] = 0x69;
 506              		.loc 1 219 14 is_stmt 0 view .LVU177
 507 001a 6D21     		movs	r1, #109
 508 001c 8DF80510 		strb	r1, [sp, #5]
 220:Src/ethernetif.c ****   MACAddr[3] = 0x6B;
 509              		.loc 1 220 3 is_stmt 1 view .LVU178
 220:Src/ethernetif.c ****   MACAddr[3] = 0x6B;
 510              		.loc 1 220 14 is_stmt 0 view .LVU179
 511 0020 6921     		movs	r1, #105
 512 0022 8DF80610 		strb	r1, [sp, #6]
 221:Src/ethernetif.c ****   MACAddr[4] = 0x75;
 513              		.loc 1 221 3 is_stmt 1 view .LVU180
 221:Src/ethernetif.c ****   MACAddr[4] = 0x75;
 514              		.loc 1 221 14 is_stmt 0 view .LVU181
 515 0026 6B21     		movs	r1, #107
 516 0028 8DF80710 		strb	r1, [sp, #7]
 222:Src/ethernetif.c ****   MACAddr[5] = 0x01;
 517              		.loc 1 222 3 is_stmt 1 view .LVU182
 222:Src/ethernetif.c ****   MACAddr[5] = 0x01;
 518              		.loc 1 222 14 is_stmt 0 view .LVU183
 519 002c 7521     		movs	r1, #117
 520 002e 8DF80810 		strb	r1, [sp, #8]
 223:Src/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 521              		.loc 1 223 3 is_stmt 1 view .LVU184
 223:Src/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 522              		.loc 1 223 14 is_stmt 0 view .LVU185
 523 0032 8DF80920 		strb	r2, [sp, #9]
 224:Src/ethernetif.c ****   heth.Init.RxMode = ETH_RXPOLLING_MODE;
 524              		.loc 1 224 3 is_stmt 1 view .LVU186
 224:Src/ethernetif.c ****   heth.Init.RxMode = ETH_RXPOLLING_MODE;
 525              		.loc 1 224 21 is_stmt 0 view .LVU187
ARM GAS  /tmp/ccyCW88r.s 			page 21


 526 0036 01AA     		add	r2, sp, #4
 527 0038 4261     		str	r2, [r0, #20]
 225:Src/ethernetif.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 528              		.loc 1 225 3 is_stmt 1 view .LVU188
 225:Src/ethernetif.c ****   heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 529              		.loc 1 225 20 is_stmt 0 view .LVU189
 530 003a 8361     		str	r3, [r0, #24]
 226:Src/ethernetif.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 531              		.loc 1 226 3 is_stmt 1 view .LVU190
 226:Src/ethernetif.c ****   heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 532              		.loc 1 226 26 is_stmt 0 view .LVU191
 533 003c C361     		str	r3, [r0, #28]
 227:Src/ethernetif.c **** 
 534              		.loc 1 227 3 is_stmt 1 view .LVU192
 227:Src/ethernetif.c **** 
 535              		.loc 1 227 28 is_stmt 0 view .LVU193
 536 003e 4FF40003 		mov	r3, #8388608
 537 0042 0362     		str	r3, [r0, #32]
 233:Src/ethernetif.c **** 
 538              		.loc 1 233 3 is_stmt 1 view .LVU194
 233:Src/ethernetif.c **** 
 539              		.loc 1 233 25 is_stmt 0 view .LVU195
 540 0044 FFF7FEFF 		bl	HAL_ETH_Init
 541              	.LVL57:
 235:Src/ethernetif.c ****   {
 542              		.loc 1 235 3 is_stmt 1 view .LVU196
 235:Src/ethernetif.c ****   {
 543              		.loc 1 235 6 is_stmt 0 view .LVU197
 544 0048 28B9     		cbnz	r0, .L33
 238:Src/ethernetif.c ****   }
 545              		.loc 1 238 5 is_stmt 1 view .LVU198
 238:Src/ethernetif.c ****   }
 546              		.loc 1 238 18 is_stmt 0 view .LVU199
 547 004a 94F82F30 		ldrb	r3, [r4, #47]	@ zero_extendqisi2
 548 004e 43F00403 		orr	r3, r3, #4
 549 0052 84F82F30 		strb	r3, [r4, #47]
 550              	.L33:
 241:Src/ethernetif.c ****      
 551              		.loc 1 241 3 is_stmt 1 view .LVU200
 552 0056 214D     		ldr	r5, .L35
 553 0058 0423     		movs	r3, #4
 554 005a 224A     		ldr	r2, .L35+8
 555 005c 2249     		ldr	r1, .L35+12
 556 005e 2846     		mov	r0, r5
 557              	.LVL58:
 241:Src/ethernetif.c ****      
 558              		.loc 1 241 3 is_stmt 0 view .LVU201
 559 0060 FFF7FEFF 		bl	HAL_ETH_DMATxDescListInit
 560              	.LVL59:
 244:Src/ethernetif.c ****  
 561              		.loc 1 244 3 is_stmt 1 view .LVU202
 562 0064 0423     		movs	r3, #4
 563 0066 214A     		ldr	r2, .L35+16
 564 0068 2149     		ldr	r1, .L35+20
 565 006a 2846     		mov	r0, r5
 566 006c FFF7FEFF 		bl	HAL_ETH_DMARxDescListInit
 567              	.LVL60:
ARM GAS  /tmp/ccyCW88r.s 			page 22


 249:Src/ethernetif.c ****   
 568              		.loc 1 249 3 view .LVU203
 249:Src/ethernetif.c ****   
 569              		.loc 1 249 21 is_stmt 0 view .LVU204
 570 0070 0623     		movs	r3, #6
 571 0072 84F82830 		strb	r3, [r4, #40]
 252:Src/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 572              		.loc 1 252 3 is_stmt 1 view .LVU205
 252:Src/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 573              		.loc 1 252 32 is_stmt 0 view .LVU206
 574 0076 6B69     		ldr	r3, [r5, #20]
 252:Src/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 575              		.loc 1 252 40 view .LVU207
 576 0078 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 252:Src/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 577              		.loc 1 252 20 view .LVU208
 578 007a 84F82920 		strb	r2, [r4, #41]
 253:Src/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 579              		.loc 1 253 3 is_stmt 1 view .LVU209
 253:Src/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 580              		.loc 1 253 20 is_stmt 0 view .LVU210
 581 007e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 582 0080 84F82A20 		strb	r2, [r4, #42]
 254:Src/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 583              		.loc 1 254 3 is_stmt 1 view .LVU211
 254:Src/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 584              		.loc 1 254 20 is_stmt 0 view .LVU212
 585 0084 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 586 0086 84F82B20 		strb	r2, [r4, #43]
 255:Src/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 587              		.loc 1 255 3 is_stmt 1 view .LVU213
 255:Src/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 588              		.loc 1 255 20 is_stmt 0 view .LVU214
 589 008a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 590 008c 84F82C20 		strb	r2, [r4, #44]
 256:Src/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 591              		.loc 1 256 3 is_stmt 1 view .LVU215
 256:Src/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 592              		.loc 1 256 20 is_stmt 0 view .LVU216
 593 0090 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 594 0092 84F82D20 		strb	r2, [r4, #45]
 257:Src/ethernetif.c ****   
 595              		.loc 1 257 3 is_stmt 1 view .LVU217
 257:Src/ethernetif.c ****   
 596              		.loc 1 257 20 is_stmt 0 view .LVU218
 597 0096 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 598 0098 84F82E30 		strb	r3, [r4, #46]
 260:Src/ethernetif.c ****   
 599              		.loc 1 260 3 is_stmt 1 view .LVU219
 260:Src/ethernetif.c ****   
 600              		.loc 1 260 14 is_stmt 0 view .LVU220
 601 009c 40F2DC53 		movw	r3, #1500
 602 00a0 E384     		strh	r3, [r4, #38]	@ movhi
 265:Src/ethernetif.c ****   #else 
 603              		.loc 1 265 5 is_stmt 1 view .LVU221
 265:Src/ethernetif.c ****   #else 
 604              		.loc 1 265 18 is_stmt 0 view .LVU222
ARM GAS  /tmp/ccyCW88r.s 			page 23


 605 00a2 94F82F30 		ldrb	r3, [r4, #47]	@ zero_extendqisi2
 606 00a6 43F00A03 		orr	r3, r3, #10
 607 00aa 84F82F30 		strb	r3, [r4, #47]
 271:Src/ethernetif.c **** 
 608              		.loc 1 271 3 is_stmt 1 view .LVU223
 609 00ae 2846     		mov	r0, r5
 610 00b0 FFF7FEFF 		bl	HAL_ETH_Start
 611              	.LVL61:
 279:Src/ethernetif.c ****   regvalue |= (PHY_ISFR_INT4);
 612              		.loc 1 279 3 view .LVU224
 613 00b4 03AA     		add	r2, sp, #12
 614 00b6 0B21     		movs	r1, #11
 615 00b8 2846     		mov	r0, r5
 616 00ba FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 617              	.LVL62:
 280:Src/ethernetif.c **** 
 618              		.loc 1 280 3 view .LVU225
 280:Src/ethernetif.c **** 
 619              		.loc 1 280 12 is_stmt 0 view .LVU226
 620 00be 039A     		ldr	r2, [sp, #12]
 621 00c0 42F00B02 		orr	r2, r2, #11
 622 00c4 0392     		str	r2, [sp, #12]
 283:Src/ethernetif.c ****   
 623              		.loc 1 283 3 is_stmt 1 view .LVU227
 624 00c6 0B21     		movs	r1, #11
 625 00c8 2846     		mov	r0, r5
 626 00ca FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 627              	.LVL63:
 286:Src/ethernetif.c **** 
 628              		.loc 1 286 3 view .LVU228
 629 00ce 03AA     		add	r2, sp, #12
 630 00d0 0B21     		movs	r1, #11
 631 00d2 2846     		mov	r0, r5
 632 00d4 FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 633              	.LVL64:
 297:Src/ethernetif.c **** 
 634              		.loc 1 297 1 is_stmt 0 view .LVU229
 635 00d8 05B0     		add	sp, sp, #20
 636              	.LCFI4:
 637              		.cfi_def_cfa_offset 12
 638              		@ sp needed
 639 00da 30BD     		pop	{r4, r5, pc}
 640              	.LVL65:
 641              	.L36:
 297:Src/ethernetif.c **** 
 642              		.loc 1 297 1 view .LVU230
 643              		.align	2
 644              	.L35:
 645 00dc 00000000 		.word	heth
 646 00e0 00800240 		.word	1073905664
 647 00e4 00000000 		.word	Tx_Buff
 648 00e8 00000000 		.word	DMATxDscrTab
 649 00ec 00000000 		.word	Rx_Buff
 650 00f0 00000000 		.word	DMARxDscrTab
 651              		.cfi_endproc
 652              	.LFE162:
 654              		.section	.text.HAL_ETH_MspInit,"ax",%progbits
ARM GAS  /tmp/ccyCW88r.s 			page 24


 655              		.align	1
 656              		.global	HAL_ETH_MspInit
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv5-sp-d16
 662              	HAL_ETH_MspInit:
 663              	.LVL66:
 664              	.LFB160:
 112:Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 665              		.loc 1 112 1 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 32
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 113:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 669              		.loc 1 113 3 view .LVU232
 114:Src/ethernetif.c ****   {
 670              		.loc 1 114 3 view .LVU233
 114:Src/ethernetif.c ****   {
 671              		.loc 1 114 15 is_stmt 0 view .LVU234
 672 0000 0268     		ldr	r2, [r0]
 114:Src/ethernetif.c ****   {
 673              		.loc 1 114 5 view .LVU235
 674 0002 244B     		ldr	r3, .L44
 675 0004 9A42     		cmp	r2, r3
 676 0006 00D0     		beq	.L43
 677 0008 7047     		bx	lr
 678              	.L43:
 112:Src/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 679              		.loc 1 112 1 view .LVU236
 680 000a F0B5     		push	{r4, r5, r6, r7, lr}
 681              	.LCFI5:
 682              		.cfi_def_cfa_offset 20
 683              		.cfi_offset 4, -20
 684              		.cfi_offset 5, -16
 685              		.cfi_offset 6, -12
 686              		.cfi_offset 7, -8
 687              		.cfi_offset 14, -4
 688 000c 89B0     		sub	sp, sp, #36
 689              	.LCFI6:
 690              		.cfi_def_cfa_offset 56
 120:Src/ethernetif.c ****   
 691              		.loc 1 120 5 is_stmt 1 view .LVU237
 120:Src/ethernetif.c ****   
 692              		.loc 1 120 5 view .LVU238
 693              	.LBB2:
 120:Src/ethernetif.c ****   
 694              		.loc 1 120 5 view .LVU239
 120:Src/ethernetif.c ****   
 695              		.loc 1 120 5 view .LVU240
 696 000e A3F59043 		sub	r3, r3, #18432
 697 0012 1A6B     		ldr	r2, [r3, #48]
 698 0014 42F00072 		orr	r2, r2, #33554432
 699 0018 1A63     		str	r2, [r3, #48]
 120:Src/ethernetif.c ****   
 700              		.loc 1 120 5 view .LVU241
 701 001a 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccyCW88r.s 			page 25


 702 001c 02F00072 		and	r2, r2, #33554432
 703 0020 0092     		str	r2, [sp]
 120:Src/ethernetif.c ****   
 704              		.loc 1 120 5 view .LVU242
 705 0022 009A     		ldr	r2, [sp]
 706              	.LBE2:
 120:Src/ethernetif.c ****   
 707              		.loc 1 120 5 view .LVU243
 708              	.LBB3:
 120:Src/ethernetif.c ****   
 709              		.loc 1 120 5 view .LVU244
 120:Src/ethernetif.c ****   
 710              		.loc 1 120 5 view .LVU245
 711 0024 1A6B     		ldr	r2, [r3, #48]
 712 0026 42F08062 		orr	r2, r2, #67108864
 713 002a 1A63     		str	r2, [r3, #48]
 120:Src/ethernetif.c ****   
 714              		.loc 1 120 5 view .LVU246
 715 002c 1A6B     		ldr	r2, [r3, #48]
 716 002e 02F08062 		and	r2, r2, #67108864
 717 0032 0192     		str	r2, [sp, #4]
 120:Src/ethernetif.c ****   
 718              		.loc 1 120 5 view .LVU247
 719 0034 019A     		ldr	r2, [sp, #4]
 720              	.LBE3:
 120:Src/ethernetif.c ****   
 721              		.loc 1 120 5 view .LVU248
 722              	.LBB4:
 120:Src/ethernetif.c ****   
 723              		.loc 1 120 5 view .LVU249
 120:Src/ethernetif.c ****   
 724              		.loc 1 120 5 view .LVU250
 725 0036 1A6B     		ldr	r2, [r3, #48]
 726 0038 42F00062 		orr	r2, r2, #134217728
 727 003c 1A63     		str	r2, [r3, #48]
 120:Src/ethernetif.c ****   
 728              		.loc 1 120 5 view .LVU251
 729 003e 1B6B     		ldr	r3, [r3, #48]
 730 0040 03F00063 		and	r3, r3, #134217728
 731 0044 0293     		str	r3, [sp, #8]
 120:Src/ethernetif.c ****   
 732              		.loc 1 120 5 view .LVU252
 733 0046 029B     		ldr	r3, [sp, #8]
 734              	.LBE4:
 133:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 735              		.loc 1 133 5 view .LVU253
 133:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 736              		.loc 1 133 25 is_stmt 0 view .LVU254
 737 0048 4FF4D043 		mov	r3, #26624
 738 004c 0393     		str	r3, [sp, #12]
 134:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 739              		.loc 1 134 5 is_stmt 1 view .LVU255
 134:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 740              		.loc 1 134 26 is_stmt 0 view .LVU256
 741 004e 0227     		movs	r7, #2
 742 0050 0497     		str	r7, [sp, #16]
 135:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
ARM GAS  /tmp/ccyCW88r.s 			page 26


 743              		.loc 1 135 5 is_stmt 1 view .LVU257
 135:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 744              		.loc 1 135 26 is_stmt 0 view .LVU258
 745 0052 0026     		movs	r6, #0
 746 0054 0596     		str	r6, [sp, #20]
 136:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 747              		.loc 1 136 5 is_stmt 1 view .LVU259
 136:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 748              		.loc 1 136 27 is_stmt 0 view .LVU260
 749 0056 0325     		movs	r5, #3
 750 0058 0695     		str	r5, [sp, #24]
 137:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 751              		.loc 1 137 5 is_stmt 1 view .LVU261
 137:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 752              		.loc 1 137 31 is_stmt 0 view .LVU262
 753 005a 0B24     		movs	r4, #11
 754 005c 0794     		str	r4, [sp, #28]
 138:Src/ethernetif.c **** 
 755              		.loc 1 138 5 is_stmt 1 view .LVU263
 756 005e 03A9     		add	r1, sp, #12
 757 0060 0D48     		ldr	r0, .L44+4
 758              	.LVL67:
 138:Src/ethernetif.c **** 
 759              		.loc 1 138 5 is_stmt 0 view .LVU264
 760 0062 FFF7FEFF 		bl	HAL_GPIO_Init
 761              	.LVL68:
 140:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 762              		.loc 1 140 5 is_stmt 1 view .LVU265
 140:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 763              		.loc 1 140 25 is_stmt 0 view .LVU266
 764 0066 3223     		movs	r3, #50
 765 0068 0393     		str	r3, [sp, #12]
 141:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 766              		.loc 1 141 5 is_stmt 1 view .LVU267
 141:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 767              		.loc 1 141 26 is_stmt 0 view .LVU268
 768 006a 0497     		str	r7, [sp, #16]
 142:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 769              		.loc 1 142 5 is_stmt 1 view .LVU269
 142:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 770              		.loc 1 142 26 is_stmt 0 view .LVU270
 771 006c 0596     		str	r6, [sp, #20]
 143:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 772              		.loc 1 143 5 is_stmt 1 view .LVU271
 143:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 773              		.loc 1 143 27 is_stmt 0 view .LVU272
 774 006e 0695     		str	r5, [sp, #24]
 144:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 775              		.loc 1 144 5 is_stmt 1 view .LVU273
 144:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 776              		.loc 1 144 31 is_stmt 0 view .LVU274
 777 0070 0794     		str	r4, [sp, #28]
 145:Src/ethernetif.c **** 
 778              		.loc 1 145 5 is_stmt 1 view .LVU275
 779 0072 03A9     		add	r1, sp, #12
 780 0074 0948     		ldr	r0, .L44+8
 781 0076 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccyCW88r.s 			page 27


 782              	.LVL69:
 147:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 783              		.loc 1 147 5 view .LVU276
 147:Src/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 784              		.loc 1 147 25 is_stmt 0 view .LVU277
 785 007a 8623     		movs	r3, #134
 786 007c 0393     		str	r3, [sp, #12]
 148:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 787              		.loc 1 148 5 is_stmt 1 view .LVU278
 148:Src/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 788              		.loc 1 148 26 is_stmt 0 view .LVU279
 789 007e 0497     		str	r7, [sp, #16]
 149:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 790              		.loc 1 149 5 is_stmt 1 view .LVU280
 149:Src/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 791              		.loc 1 149 26 is_stmt 0 view .LVU281
 792 0080 0596     		str	r6, [sp, #20]
 150:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 793              		.loc 1 150 5 is_stmt 1 view .LVU282
 150:Src/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 794              		.loc 1 150 27 is_stmt 0 view .LVU283
 795 0082 0695     		str	r5, [sp, #24]
 151:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 796              		.loc 1 151 5 is_stmt 1 view .LVU284
 151:Src/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 797              		.loc 1 151 31 is_stmt 0 view .LVU285
 798 0084 0794     		str	r4, [sp, #28]
 152:Src/ethernetif.c **** 
 799              		.loc 1 152 5 is_stmt 1 view .LVU286
 800 0086 03A9     		add	r1, sp, #12
 801 0088 0548     		ldr	r0, .L44+12
 802 008a FFF7FEFF 		bl	HAL_GPIO_Init
 803              	.LVL70:
 158:Src/ethernetif.c **** 
 804              		.loc 1 158 1 is_stmt 0 view .LVU287
 805 008e 09B0     		add	sp, sp, #36
 806              	.LCFI7:
 807              		.cfi_def_cfa_offset 20
 808              		@ sp needed
 809 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 810              	.L45:
 811 0092 00BF     		.align	2
 812              	.L44:
 813 0094 00800240 		.word	1073905664
 814 0098 00180240 		.word	1073879040
 815 009c 00080240 		.word	1073874944
 816 00a0 00000240 		.word	1073872896
 817              		.cfi_endproc
 818              	.LFE160:
 820              		.section	.text.HAL_ETH_MspDeInit,"ax",%progbits
 821              		.align	1
 822              		.global	HAL_ETH_MspDeInit
 823              		.syntax unified
 824              		.thumb
 825              		.thumb_func
 826              		.fpu fpv5-sp-d16
 828              	HAL_ETH_MspDeInit:
ARM GAS  /tmp/ccyCW88r.s 			page 28


 829              	.LVL71:
 830              	.LFB161:
 161:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 831              		.loc 1 161 1 is_stmt 1 view -0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 161:Src/ethernetif.c ****   if(ethHandle->Instance==ETH)
 835              		.loc 1 161 1 is_stmt 0 view .LVU289
 836 0000 08B5     		push	{r3, lr}
 837              	.LCFI8:
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 3, -8
 840              		.cfi_offset 14, -4
 162:Src/ethernetif.c ****   {
 841              		.loc 1 162 3 is_stmt 1 view .LVU290
 162:Src/ethernetif.c ****   {
 842              		.loc 1 162 15 is_stmt 0 view .LVU291
 843 0002 0268     		ldr	r2, [r0]
 162:Src/ethernetif.c ****   {
 844              		.loc 1 162 5 view .LVU292
 845 0004 0F4B     		ldr	r3, .L50
 846 0006 9A42     		cmp	r2, r3
 847 0008 00D0     		beq	.L49
 848              	.LVL72:
 849              	.L46:
 191:Src/ethernetif.c **** 
 850              		.loc 1 191 1 view .LVU293
 851 000a 08BD     		pop	{r3, pc}
 852              	.LVL73:
 853              	.L49:
 168:Src/ethernetif.c ****   
 854              		.loc 1 168 5 is_stmt 1 view .LVU294
 168:Src/ethernetif.c ****   
 855              		.loc 1 168 5 view .LVU295
 856 000c A3F59043 		sub	r3, r3, #18432
 857 0010 1A6B     		ldr	r2, [r3, #48]
 858 0012 22F08062 		bic	r2, r2, #67108864
 859 0016 1A63     		str	r2, [r3, #48]
 168:Src/ethernetif.c ****   
 860              		.loc 1 168 5 view .LVU296
 861 0018 1A6B     		ldr	r2, [r3, #48]
 862 001a 22F00062 		bic	r2, r2, #134217728
 863 001e 1A63     		str	r2, [r3, #48]
 168:Src/ethernetif.c ****   
 864              		.loc 1 168 5 view .LVU297
 865 0020 1A6B     		ldr	r2, [r3, #48]
 866 0022 22F00072 		bic	r2, r2, #33554432
 867 0026 1A63     		str	r2, [r3, #48]
 181:Src/ethernetif.c **** 
 868              		.loc 1 181 5 view .LVU298
 869 0028 4FF4D041 		mov	r1, #26624
 870 002c 0648     		ldr	r0, .L50+4
 871              	.LVL74:
 181:Src/ethernetif.c **** 
 872              		.loc 1 181 5 is_stmt 0 view .LVU299
 873 002e FFF7FEFF 		bl	HAL_GPIO_DeInit
ARM GAS  /tmp/ccyCW88r.s 			page 29


 874              	.LVL75:
 183:Src/ethernetif.c **** 
 875              		.loc 1 183 5 is_stmt 1 view .LVU300
 876 0032 3221     		movs	r1, #50
 877 0034 0548     		ldr	r0, .L50+8
 878 0036 FFF7FEFF 		bl	HAL_GPIO_DeInit
 879              	.LVL76:
 185:Src/ethernetif.c **** 
 880              		.loc 1 185 5 view .LVU301
 881 003a 8621     		movs	r1, #134
 882 003c 0448     		ldr	r0, .L50+12
 883 003e FFF7FEFF 		bl	HAL_GPIO_DeInit
 884              	.LVL77:
 191:Src/ethernetif.c **** 
 885              		.loc 1 191 1 is_stmt 0 view .LVU302
 886 0042 E2E7     		b	.L46
 887              	.L51:
 888              		.align	2
 889              	.L50:
 890 0044 00800240 		.word	1073905664
 891 0048 00180240 		.word	1073879040
 892 004c 00080240 		.word	1073874944
 893 0050 00000240 		.word	1073872896
 894              		.cfi_endproc
 895              	.LFE161:
 897              		.section	.text.ethernetif_input,"ax",%progbits
 898              		.align	1
 899              		.global	ethernetif_input
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu fpv5-sp-d16
 905              	ethernetif_input:
 906              	.LVL78:
 907              	.LFB165:
 478:Src/ethernetif.c **** 
 479:Src/ethernetif.c **** /**
 480:Src/ethernetif.c ****  * This function should be called when a packet is ready to be read
 481:Src/ethernetif.c ****  * from the interface. It uses the function low_level_input() that
 482:Src/ethernetif.c ****  * should handle the actual reception of bytes from the network
 483:Src/ethernetif.c ****  * interface. Then the type of the received packet is determined and
 484:Src/ethernetif.c ****  * the appropriate input function is called.
 485:Src/ethernetif.c ****  *
 486:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 487:Src/ethernetif.c ****  */
 488:Src/ethernetif.c **** void ethernetif_input(struct netif *netif)
 489:Src/ethernetif.c **** {
 908              		.loc 1 489 1 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 912              		.loc 1 489 1 is_stmt 0 view .LVU304
 913 0000 38B5     		push	{r3, r4, r5, lr}
 914              	.LCFI9:
 915              		.cfi_def_cfa_offset 16
 916              		.cfi_offset 3, -16
 917              		.cfi_offset 4, -12
ARM GAS  /tmp/ccyCW88r.s 			page 30


 918              		.cfi_offset 5, -8
 919              		.cfi_offset 14, -4
 920 0002 0446     		mov	r4, r0
 490:Src/ethernetif.c ****   err_t err;
 921              		.loc 1 490 3 is_stmt 1 view .LVU305
 491:Src/ethernetif.c ****   struct pbuf *p;
 922              		.loc 1 491 3 view .LVU306
 492:Src/ethernetif.c **** 
 493:Src/ethernetif.c ****   /* move received packet into a new pbuf */
 494:Src/ethernetif.c ****   p = low_level_input(netif);
 923              		.loc 1 494 3 view .LVU307
 924              		.loc 1 494 7 is_stmt 0 view .LVU308
 925 0004 FFF7FEFF 		bl	low_level_input
 926              	.LVL79:
 495:Src/ethernetif.c ****     
 496:Src/ethernetif.c ****   /* no packet could be read, silently ignore this */
 497:Src/ethernetif.c ****   if (p == NULL) return;
 927              		.loc 1 497 3 is_stmt 1 view .LVU309
 928              		.loc 1 497 6 is_stmt 0 view .LVU310
 929 0008 20B1     		cbz	r0, .L52
 930 000a 0546     		mov	r5, r0
 498:Src/ethernetif.c ****     
 499:Src/ethernetif.c ****   /* entry point to the LwIP stack */
 500:Src/ethernetif.c ****   err = netif->input(p, netif);
 931              		.loc 1 500 3 is_stmt 1 view .LVU311
 932              		.loc 1 500 14 is_stmt 0 view .LVU312
 933 000c 2369     		ldr	r3, [r4, #16]
 934              		.loc 1 500 9 view .LVU313
 935 000e 2146     		mov	r1, r4
 936 0010 9847     		blx	r3
 937              	.LVL80:
 501:Src/ethernetif.c ****     
 502:Src/ethernetif.c ****   if (err != ERR_OK)
 938              		.loc 1 502 3 is_stmt 1 view .LVU314
 939              		.loc 1 502 6 is_stmt 0 view .LVU315
 940 0012 00B9     		cbnz	r0, .L55
 941              	.LVL81:
 942              	.L52:
 503:Src/ethernetif.c ****   {
 504:Src/ethernetif.c ****     LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
 505:Src/ethernetif.c ****     pbuf_free(p);
 506:Src/ethernetif.c ****     p = NULL;    
 507:Src/ethernetif.c ****   }
 508:Src/ethernetif.c **** }
 943              		.loc 1 508 1 view .LVU316
 944 0014 38BD     		pop	{r3, r4, r5, pc}
 945              	.LVL82:
 946              	.L55:
 504:Src/ethernetif.c ****     pbuf_free(p);
 947              		.loc 1 504 69 is_stmt 1 view .LVU317
 505:Src/ethernetif.c ****     p = NULL;    
 948              		.loc 1 505 5 view .LVU318
 949 0016 2846     		mov	r0, r5
 950              	.LVL83:
 505:Src/ethernetif.c ****     p = NULL;    
 951              		.loc 1 505 5 is_stmt 0 view .LVU319
 952 0018 FFF7FEFF 		bl	pbuf_free
ARM GAS  /tmp/ccyCW88r.s 			page 31


 953              	.LVL84:
 506:Src/ethernetif.c ****   }
 954              		.loc 1 506 5 is_stmt 1 view .LVU320
 506:Src/ethernetif.c ****   }
 955              		.loc 1 506 5 is_stmt 0 view .LVU321
 956 001c FAE7     		b	.L52
 957              		.cfi_endproc
 958              	.LFE165:
 960              		.section	.text.ethernetif_init,"ax",%progbits
 961              		.align	1
 962              		.global	ethernetif_init
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv5-sp-d16
 968              	ethernetif_init:
 969              	.LVL85:
 970              	.LFB166:
 509:Src/ethernetif.c **** 
 510:Src/ethernetif.c **** #if !LWIP_ARP
 511:Src/ethernetif.c **** /**
 512:Src/ethernetif.c ****  * This function has to be completed by user in case of ARP OFF.
 513:Src/ethernetif.c ****  *
 514:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 515:Src/ethernetif.c ****  * @return ERR_OK if ...
 516:Src/ethernetif.c ****  */
 517:Src/ethernetif.c **** static err_t low_level_output_arp_off(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr
 518:Src/ethernetif.c **** {  
 519:Src/ethernetif.c ****   err_t errval;
 520:Src/ethernetif.c ****   errval = ERR_OK;
 521:Src/ethernetif.c ****     
 522:Src/ethernetif.c **** /* USER CODE BEGIN 5 */ 
 523:Src/ethernetif.c ****     
 524:Src/ethernetif.c **** /* USER CODE END 5 */  
 525:Src/ethernetif.c ****     
 526:Src/ethernetif.c ****   return errval;
 527:Src/ethernetif.c ****   
 528:Src/ethernetif.c **** }
 529:Src/ethernetif.c **** #endif /* LWIP_ARP */ 
 530:Src/ethernetif.c **** 
 531:Src/ethernetif.c **** /**
 532:Src/ethernetif.c ****  * Should be called at the beginning of the program to set up the
 533:Src/ethernetif.c ****  * network interface. It calls the function low_level_init() to do the
 534:Src/ethernetif.c ****  * actual setup of the hardware.
 535:Src/ethernetif.c ****  *
 536:Src/ethernetif.c ****  * This function should be passed as a parameter to netif_add().
 537:Src/ethernetif.c ****  *
 538:Src/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 539:Src/ethernetif.c ****  * @return ERR_OK if the loopif is initialized
 540:Src/ethernetif.c ****  *         ERR_MEM if private data couldn't be allocated
 541:Src/ethernetif.c ****  *         any other err_t on error
 542:Src/ethernetif.c ****  */
 543:Src/ethernetif.c **** err_t ethernetif_init(struct netif *netif)
 544:Src/ethernetif.c **** {
 971              		.loc 1 544 1 is_stmt 1 view -0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccyCW88r.s 			page 32


 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975              		.loc 1 544 1 is_stmt 0 view .LVU323
 976 0000 10B5     		push	{r4, lr}
 977              	.LCFI10:
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 4, -8
 980              		.cfi_offset 14, -4
 545:Src/ethernetif.c ****   LWIP_ASSERT("netif != NULL", (netif != NULL));
 981              		.loc 1 545 3 is_stmt 1 view .LVU324
 982              		.loc 1 545 3 view .LVU325
 983 0002 0446     		mov	r4, r0
 984 0004 70B1     		cbz	r0, .L59
 985              	.LVL86:
 986              	.L57:
 546:Src/ethernetif.c ****   
 547:Src/ethernetif.c **** #if LWIP_NETIF_HOSTNAME
 548:Src/ethernetif.c ****   /* Initialize interface hostname */
 549:Src/ethernetif.c ****   netif->hostname = "lwip";
 550:Src/ethernetif.c **** #endif /* LWIP_NETIF_HOSTNAME */
 551:Src/ethernetif.c **** 
 552:Src/ethernetif.c ****   netif->name[0] = IFNAME0;
 987              		.loc 1 552 3 view .LVU326
 988              		.loc 1 552 18 is_stmt 0 view .LVU327
 989 0006 7323     		movs	r3, #115
 990 0008 84F83030 		strb	r3, [r4, #48]
 553:Src/ethernetif.c ****   netif->name[1] = IFNAME1;
 991              		.loc 1 553 3 is_stmt 1 view .LVU328
 992              		.loc 1 553 18 is_stmt 0 view .LVU329
 993 000c 7423     		movs	r3, #116
 994 000e 84F83130 		strb	r3, [r4, #49]
 554:Src/ethernetif.c ****   /* We directly use etharp_output() here to save a function call.
 555:Src/ethernetif.c ****    * You can instead declare your own function an call etharp_output()
 556:Src/ethernetif.c ****    * from it if you have to do some checks before sending (e.g. if link
 557:Src/ethernetif.c ****    * is available...) */
 558:Src/ethernetif.c **** 
 559:Src/ethernetif.c **** #if LWIP_IPV4
 560:Src/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET
 561:Src/ethernetif.c **** #if LWIP_ARP
 562:Src/ethernetif.c ****   netif->output = etharp_output;
 995              		.loc 1 562 3 is_stmt 1 view .LVU330
 996              		.loc 1 562 17 is_stmt 0 view .LVU331
 997 0012 084B     		ldr	r3, .L60
 998 0014 6361     		str	r3, [r4, #20]
 563:Src/ethernetif.c **** #else
 564:Src/ethernetif.c ****   /* The user should write ist own code in low_level_output_arp_off function */
 565:Src/ethernetif.c ****   netif->output = low_level_output_arp_off;
 566:Src/ethernetif.c **** #endif /* LWIP_ARP */
 567:Src/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 568:Src/ethernetif.c **** #endif /* LWIP_IPV4 */
 569:Src/ethernetif.c ****  
 570:Src/ethernetif.c **** #if LWIP_IPV6
 571:Src/ethernetif.c ****   netif->output_ip6 = ethip6_output;
 572:Src/ethernetif.c **** #endif /* LWIP_IPV6 */
 573:Src/ethernetif.c **** 
 574:Src/ethernetif.c ****   netif->linkoutput = low_level_output;
 999              		.loc 1 574 3 is_stmt 1 view .LVU332
 1000              		.loc 1 574 21 is_stmt 0 view .LVU333
ARM GAS  /tmp/ccyCW88r.s 			page 33


 1001 0016 084B     		ldr	r3, .L60+4
 1002 0018 A361     		str	r3, [r4, #24]
 575:Src/ethernetif.c **** 
 576:Src/ethernetif.c ****   /* initialize the hardware */
 577:Src/ethernetif.c ****   low_level_init(netif);
 1003              		.loc 1 577 3 is_stmt 1 view .LVU334
 1004 001a 2046     		mov	r0, r4
 1005 001c FFF7FEFF 		bl	low_level_init
 1006              	.LVL87:
 578:Src/ethernetif.c **** 
 579:Src/ethernetif.c ****   return ERR_OK;
 1007              		.loc 1 579 3 view .LVU335
 580:Src/ethernetif.c **** }
 1008              		.loc 1 580 1 is_stmt 0 view .LVU336
 1009 0020 0020     		movs	r0, #0
 1010 0022 10BD     		pop	{r4, pc}
 1011              	.LVL88:
 1012              	.L59:
 545:Src/ethernetif.c ****   
 1013              		.loc 1 545 3 is_stmt 1 discriminator 1 view .LVU337
 545:Src/ethernetif.c ****   
 1014              		.loc 1 545 3 discriminator 1 view .LVU338
 1015 0024 054B     		ldr	r3, .L60+8
 1016 0026 40F22122 		movw	r2, #545
 1017 002a 0549     		ldr	r1, .L60+12
 1018 002c 0548     		ldr	r0, .L60+16
 1019              	.LVL89:
 545:Src/ethernetif.c ****   
 1020              		.loc 1 545 3 is_stmt 0 discriminator 1 view .LVU339
 1021 002e FFF7FEFF 		bl	printf
 1022              	.LVL90:
 1023 0032 E8E7     		b	.L57
 1024              	.L61:
 1025              		.align	2
 1026              	.L60:
 1027 0034 00000000 		.word	etharp_output
 1028 0038 00000000 		.word	low_level_output
 1029 003c 00000000 		.word	.LC0
 1030 0040 14000000 		.word	.LC1
 1031 0044 24000000 		.word	.LC2
 1032              		.cfi_endproc
 1033              	.LFE166:
 1035              		.section	.text.sys_jiffies,"ax",%progbits
 1036              		.align	1
 1037              		.global	sys_jiffies
 1038              		.syntax unified
 1039              		.thumb
 1040              		.thumb_func
 1041              		.fpu fpv5-sp-d16
 1043              	sys_jiffies:
 1044              	.LFB167:
 581:Src/ethernetif.c **** 
 582:Src/ethernetif.c **** /* USER CODE BEGIN 6 */
 583:Src/ethernetif.c **** 
 584:Src/ethernetif.c **** /**
 585:Src/ethernetif.c **** * @brief  Returns the current time in milliseconds
 586:Src/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
ARM GAS  /tmp/ccyCW88r.s 			page 34


 587:Src/ethernetif.c **** * @param  None
 588:Src/ethernetif.c **** * @retval Time
 589:Src/ethernetif.c **** */
 590:Src/ethernetif.c **** u32_t sys_jiffies(void)
 591:Src/ethernetif.c **** {
 1045              		.loc 1 591 1 is_stmt 1 view -0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049 0000 08B5     		push	{r3, lr}
 1050              	.LCFI11:
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 3, -8
 1053              		.cfi_offset 14, -4
 592:Src/ethernetif.c ****   return HAL_GetTick();
 1054              		.loc 1 592 3 view .LVU341
 1055              		.loc 1 592 10 is_stmt 0 view .LVU342
 1056 0002 FFF7FEFF 		bl	HAL_GetTick
 1057              	.LVL91:
 593:Src/ethernetif.c **** }
 1058              		.loc 1 593 1 view .LVU343
 1059 0006 08BD     		pop	{r3, pc}
 1060              		.cfi_endproc
 1061              	.LFE167:
 1063              		.section	.text.sys_now,"ax",%progbits
 1064              		.align	1
 1065              		.global	sys_now
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu fpv5-sp-d16
 1071              	sys_now:
 1072              	.LFB168:
 594:Src/ethernetif.c **** 
 595:Src/ethernetif.c **** /**
 596:Src/ethernetif.c **** * @brief  Returns the current time in milliseconds
 597:Src/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
 598:Src/ethernetif.c **** * @param  None
 599:Src/ethernetif.c **** * @retval Time
 600:Src/ethernetif.c **** */
 601:Src/ethernetif.c **** u32_t sys_now(void)
 602:Src/ethernetif.c **** {
 1073              		.loc 1 602 1 is_stmt 1 view -0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077 0000 08B5     		push	{r3, lr}
 1078              	.LCFI12:
 1079              		.cfi_def_cfa_offset 8
 1080              		.cfi_offset 3, -8
 1081              		.cfi_offset 14, -4
 603:Src/ethernetif.c ****   return HAL_GetTick();
 1082              		.loc 1 603 3 view .LVU345
 1083              		.loc 1 603 10 is_stmt 0 view .LVU346
 1084 0002 FFF7FEFF 		bl	HAL_GetTick
 1085              	.LVL92:
 604:Src/ethernetif.c **** }
ARM GAS  /tmp/ccyCW88r.s 			page 35


 1086              		.loc 1 604 1 view .LVU347
 1087 0006 08BD     		pop	{r3, pc}
 1088              		.cfi_endproc
 1089              	.LFE168:
 1091              		.comm	heth,72,4
 1092              		.comm	Tx_Buff,6096,4
 1093              		.comm	Rx_Buff,6096,4
 1094              		.comm	DMATxDscrTab,128,4
 1095              		.comm	DMARxDscrTab,128,4
 1096              		.section	.rodata.ethernetif_init.str1.4,"aMS",%progbits,1
 1097              		.align	2
 1098              	.LC0:
 1099 0000 5372632F 		.ascii	"Src/ethernetif.c\000"
 1099      65746865 
 1099      726E6574 
 1099      69662E63 
 1099      00
 1100 0011 000000   		.space	3
 1101              	.LC1:
 1102 0014 6E657469 		.ascii	"netif != NULL\000"
 1102      6620213D 
 1102      204E554C 
 1102      4C00
 1103 0022 0000     		.space	2
 1104              	.LC2:
 1105 0024 41737365 		.ascii	"Assertion \"%s\" failed at line %d in %s\012\000"
 1105      7274696F 
 1105      6E202225 
 1105      73222066 
 1105      61696C65 
 1106              		.text
 1107              	.Letext0:
 1108              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1109              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1110              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1111              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1112              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f746xx.h"
 1113              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 1114              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 1115              		.file 9 "/usr/lib/gcc/arm-none-eabi/8.3.0/include/stddef.h"
 1116              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 1117              		.file 11 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1118              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1119              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1120              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 1121              		.file 15 "/usr/arm-none-eabi/include/stdlib.h"
 1122              		.file 16 "/usr/arm-none-eabi/include/time.h"
 1123              		.file 17 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 1124              		.file 18 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 1125              		.file 19 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 1126              		.file 20 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 1127              		.file 21 "Middlewares/Third_Party/LwIP/src/include/lwip/timeouts.h"
 1128              		.file 22 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 1129              		.file 23 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 1130              		.file 24 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 1131              		.file 25 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 1132              		.file 26 "Middlewares/Third_Party/LwIP/src/include/lwip/prot/ethernet.h"
ARM GAS  /tmp/ccyCW88r.s 			page 36


 1133              		.file 27 "Middlewares/Third_Party/LwIP/src/include/netif/ethernet.h"
 1134              		.file 28 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1135              		.file 29 "/usr/arm-none-eabi/include/stdio.h"
 1136              		.file 30 "<built-in>"
ARM GAS  /tmp/ccyCW88r.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ethernetif.c
     /tmp/ccyCW88r.s:18     .text.low_level_input:0000000000000000 $t
     /tmp/ccyCW88r.s:25     .text.low_level_input:0000000000000000 low_level_input
     /tmp/ccyCW88r.s:253    .text.low_level_input:00000000000000d4 $d
                            *COM*:0000000000000048 heth
     /tmp/ccyCW88r.s:258    .text.low_level_output:0000000000000000 $t
     /tmp/ccyCW88r.s:264    .text.low_level_output:0000000000000000 low_level_output
     /tmp/ccyCW88r.s:453    .text.low_level_output:00000000000000b8 $d
     /tmp/ccyCW88r.s:458    .text.low_level_init:0000000000000000 $t
     /tmp/ccyCW88r.s:464    .text.low_level_init:0000000000000000 low_level_init
     /tmp/ccyCW88r.s:645    .text.low_level_init:00000000000000dc $d
                            *COM*:00000000000017d0 Tx_Buff
                            *COM*:0000000000000080 DMATxDscrTab
                            *COM*:00000000000017d0 Rx_Buff
                            *COM*:0000000000000080 DMARxDscrTab
     /tmp/ccyCW88r.s:655    .text.HAL_ETH_MspInit:0000000000000000 $t
     /tmp/ccyCW88r.s:662    .text.HAL_ETH_MspInit:0000000000000000 HAL_ETH_MspInit
     /tmp/ccyCW88r.s:813    .text.HAL_ETH_MspInit:0000000000000094 $d
     /tmp/ccyCW88r.s:821    .text.HAL_ETH_MspDeInit:0000000000000000 $t
     /tmp/ccyCW88r.s:828    .text.HAL_ETH_MspDeInit:0000000000000000 HAL_ETH_MspDeInit
     /tmp/ccyCW88r.s:890    .text.HAL_ETH_MspDeInit:0000000000000044 $d
     /tmp/ccyCW88r.s:898    .text.ethernetif_input:0000000000000000 $t
     /tmp/ccyCW88r.s:905    .text.ethernetif_input:0000000000000000 ethernetif_input
     /tmp/ccyCW88r.s:961    .text.ethernetif_init:0000000000000000 $t
     /tmp/ccyCW88r.s:968    .text.ethernetif_init:0000000000000000 ethernetif_init
     /tmp/ccyCW88r.s:1027   .text.ethernetif_init:0000000000000034 $d
     /tmp/ccyCW88r.s:1036   .text.sys_jiffies:0000000000000000 $t
     /tmp/ccyCW88r.s:1043   .text.sys_jiffies:0000000000000000 sys_jiffies
     /tmp/ccyCW88r.s:1064   .text.sys_now:0000000000000000 $t
     /tmp/ccyCW88r.s:1071   .text.sys_now:0000000000000000 sys_now
     /tmp/ccyCW88r.s:1097   .rodata.ethernetif_init.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_ETH_GetReceivedFrame
pbuf_alloc
memcpy
HAL_ETH_TransmitFrame
HAL_ETH_Init
HAL_ETH_DMATxDescListInit
HAL_ETH_DMARxDescListInit
HAL_ETH_Start
HAL_ETH_ReadPHYRegister
HAL_ETH_WritePHYRegister
HAL_GPIO_Init
HAL_GPIO_DeInit
pbuf_free
printf
etharp_output
HAL_GetTick
